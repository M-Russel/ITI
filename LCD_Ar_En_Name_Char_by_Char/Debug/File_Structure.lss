
File_Structure.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000646  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000058  00800060  00000646  000006ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00000f78  00000000  00000000  00000714  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000d5d  00000000  00000000  0000168c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e4       	ldi	r30, 0x46	; 70
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a8 3b       	cpi	r26, 0xB8	; 184
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 3c 02 	call	0x478	; 0x478 <main>
  7a:	0c 94 21 03 	jmp	0x642	; 0x642 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_u8SetPortDirection>:
 * 																												*
 * 																												*
 * **************************************************************************************************************/

u8 DIO_u8SetPortDirection(pu8 Copy_pu8_DDR , u8 Copy_u8_Direction) // HEADER OF THE FUNCTION
{
  82:	df 93       	push	r29
  84:	cf 93       	push	r28
  86:	00 d0       	rcall	.+0      	; 0x88 <DIO_u8SetPortDirection+0x6>
  88:	00 d0       	rcall	.+0      	; 0x8a <DIO_u8SetPortDirection+0x8>
  8a:	cd b7       	in	r28, 0x3d	; 61
  8c:	de b7       	in	r29, 0x3e	; 62
  8e:	9a 83       	std	Y+2, r25	; 0x02
  90:	89 83       	std	Y+1, r24	; 0x01
  92:	6b 83       	std	Y+3, r22	; 0x03

	if(Copy_u8_Direction == DIO_INPUT) // CHECKING ON THE VALUE OF THE DIRECTION IF IT IS INPUT
  94:	8b 81       	ldd	r24, Y+3	; 0x03
  96:	88 23       	and	r24, r24
  98:	29 f4       	brne	.+10     	; 0xa4 <DIO_u8SetPortDirection+0x22>
	{
		*(Copy_pu8_DDR)= DIO_PORT_INPUT; // ASSIGNING THE INPUT VALUE TO THE REQUIRED DDR
  9a:	e9 81       	ldd	r30, Y+1	; 0x01
  9c:	fa 81       	ldd	r31, Y+2	; 0x02
  9e:	10 82       	st	Z, r1
		return 0;					// RETURNING TO THE CALLER
  a0:	1c 82       	std	Y+4, r1	; 0x04
  a2:	0f c0       	rjmp	.+30     	; 0xc2 <DIO_u8SetPortDirection+0x40>
	}
	else if (Copy_u8_Direction == DIO_OUTPUT) // CHECKING ON THE VALUE OF THE DIRECTION IF IT IS OUTPUT
  a4:	8b 81       	ldd	r24, Y+3	; 0x03
  a6:	81 30       	cpi	r24, 0x01	; 1
  a8:	31 f4       	brne	.+12     	; 0xb6 <DIO_u8SetPortDirection+0x34>
	{
		*(Copy_pu8_DDR)=DIO_PORT_OUTPUT; // ASSIGNING THE OUTPUT VALUE TO THE REQUIRED DDR
  aa:	e9 81       	ldd	r30, Y+1	; 0x01
  ac:	fa 81       	ldd	r31, Y+2	; 0x02
  ae:	8f ef       	ldi	r24, 0xFF	; 255
  b0:	80 83       	st	Z, r24
		return 0; // RETURNING TO THE CALLER
  b2:	1c 82       	std	Y+4, r1	; 0x04
  b4:	06 c0       	rjmp	.+12     	; 0xc2 <DIO_u8SetPortDirection+0x40>
	}
	else // IN CASE OF THE USER ENTERED ANOTHER VALUE RATHER THAN EXPECTED
	{

		*(Copy_pu8_DDR)=DIO_PORT_OUTPUT; //THE DEFAULT VALUE
  b6:	e9 81       	ldd	r30, Y+1	; 0x01
  b8:	fa 81       	ldd	r31, Y+2	; 0x02
  ba:	8f ef       	ldi	r24, 0xFF	; 255
  bc:	80 83       	st	Z, r24
		return -1; // RETURNING THE ERROR INDICATOR
  be:	8f ef       	ldi	r24, 0xFF	; 255
  c0:	8c 83       	std	Y+4, r24	; 0x04
  c2:	8c 81       	ldd	r24, Y+4	; 0x04
	}
	return -1; // RETURNING THE ERROR INDICATOR INCASE OF ANY UNEXPECTED EVENT

}
  c4:	0f 90       	pop	r0
  c6:	0f 90       	pop	r0
  c8:	0f 90       	pop	r0
  ca:	0f 90       	pop	r0
  cc:	cf 91       	pop	r28
  ce:	df 91       	pop	r29
  d0:	08 95       	ret

000000d2 <DIO_u8SetPinDirection>:
 * 																												*
 * 																												*
 * **************************************************************************************************************/

u8 DIO_u8SetPinDirection(pu8 Copy_pu8_DDR , u8 Copy_u8_PinNumber , u8 Copy_u8_Direction)
{
  d2:	df 93       	push	r29
  d4:	cf 93       	push	r28
  d6:	00 d0       	rcall	.+0      	; 0xd8 <DIO_u8SetPinDirection+0x6>
  d8:	00 d0       	rcall	.+0      	; 0xda <DIO_u8SetPinDirection+0x8>
  da:	0f 92       	push	r0
  dc:	cd b7       	in	r28, 0x3d	; 61
  de:	de b7       	in	r29, 0x3e	; 62
  e0:	9a 83       	std	Y+2, r25	; 0x02
  e2:	89 83       	std	Y+1, r24	; 0x01
  e4:	6b 83       	std	Y+3, r22	; 0x03
  e6:	4c 83       	std	Y+4, r20	; 0x04


	if(Copy_u8_Direction == DIO_INPUT)  // CHECKING ON THE VALUE OF THE DIRECTION IF IT IS INPUT
  e8:	8c 81       	ldd	r24, Y+4	; 0x04
  ea:	88 23       	and	r24, r24
  ec:	b1 f4       	brne	.+44     	; 0x11a <DIO_u8SetPinDirection+0x48>
		{
			clrBit(*(Copy_pu8_DDR),Copy_u8_PinNumber);  // ASSIGNING THE INPUT VALUE TO THE REQUIRED PIN
  ee:	e9 81       	ldd	r30, Y+1	; 0x01
  f0:	fa 81       	ldd	r31, Y+2	; 0x02
  f2:	80 81       	ld	r24, Z
  f4:	48 2f       	mov	r20, r24
  f6:	8b 81       	ldd	r24, Y+3	; 0x03
  f8:	28 2f       	mov	r18, r24
  fa:	30 e0       	ldi	r19, 0x00	; 0
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	02 2e       	mov	r0, r18
 102:	02 c0       	rjmp	.+4      	; 0x108 <DIO_u8SetPinDirection+0x36>
 104:	88 0f       	add	r24, r24
 106:	99 1f       	adc	r25, r25
 108:	0a 94       	dec	r0
 10a:	e2 f7       	brpl	.-8      	; 0x104 <DIO_u8SetPinDirection+0x32>
 10c:	80 95       	com	r24
 10e:	84 23       	and	r24, r20
 110:	e9 81       	ldd	r30, Y+1	; 0x01
 112:	fa 81       	ldd	r31, Y+2	; 0x02
 114:	80 83       	st	Z, r24
			return 0;                           // RETURNING TO THE CALLER
 116:	1d 82       	std	Y+5, r1	; 0x05
 118:	1a c0       	rjmp	.+52     	; 0x14e <DIO_u8SetPinDirection+0x7c>
		}
		else if (Copy_u8_Direction == DIO_OUTPUT) // CHECKING ON THE VALUE OF THE DIRECTION IF IT IS OUTPUT
 11a:	8c 81       	ldd	r24, Y+4	; 0x04
 11c:	81 30       	cpi	r24, 0x01	; 1
 11e:	a9 f4       	brne	.+42     	; 0x14a <DIO_u8SetPinDirection+0x78>
		{
			setBit(*(Copy_pu8_DDR),Copy_u8_PinNumber); // ASSIGNING THE INPUT VALUE TO THE REQUIRED PIN
 120:	e9 81       	ldd	r30, Y+1	; 0x01
 122:	fa 81       	ldd	r31, Y+2	; 0x02
 124:	80 81       	ld	r24, Z
 126:	48 2f       	mov	r20, r24
 128:	8b 81       	ldd	r24, Y+3	; 0x03
 12a:	28 2f       	mov	r18, r24
 12c:	30 e0       	ldi	r19, 0x00	; 0
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	02 2e       	mov	r0, r18
 134:	02 c0       	rjmp	.+4      	; 0x13a <DIO_u8SetPinDirection+0x68>
 136:	88 0f       	add	r24, r24
 138:	99 1f       	adc	r25, r25
 13a:	0a 94       	dec	r0
 13c:	e2 f7       	brpl	.-8      	; 0x136 <DIO_u8SetPinDirection+0x64>
 13e:	84 2b       	or	r24, r20
 140:	e9 81       	ldd	r30, Y+1	; 0x01
 142:	fa 81       	ldd	r31, Y+2	; 0x02
 144:	80 83       	st	Z, r24
			return 0;// RETURNING TO THE CALLER
 146:	1d 82       	std	Y+5, r1	; 0x05
 148:	02 c0       	rjmp	.+4      	; 0x14e <DIO_u8SetPinDirection+0x7c>
		}
		else // IN CASE OF THE USER ENTERED ANOTHER VALUE RATHER THAN EXPECTED
		{

				return -1; // RETURNING THE ERROR INDICATOR
 14a:	8f ef       	ldi	r24, 0xFF	; 255
 14c:	8d 83       	std	Y+5, r24	; 0x05
 14e:	8d 81       	ldd	r24, Y+5	; 0x05


		}
return -1;  // RETURNING THE ERROR INDICATOR INCASE OF ANY UNEXPECTED EVENT
}
 150:	0f 90       	pop	r0
 152:	0f 90       	pop	r0
 154:	0f 90       	pop	r0
 156:	0f 90       	pop	r0
 158:	0f 90       	pop	r0
 15a:	cf 91       	pop	r28
 15c:	df 91       	pop	r29
 15e:	08 95       	ret

00000160 <DIO_u8SetPortValue>:
 * 																												*
 * 																												*
 * **************************************************************************************************************/

u8 DIO_u8SetPortValue(pu8 Copy_u8_PortName , u8 Copy_PortValue)
{
 160:	df 93       	push	r29
 162:	cf 93       	push	r28
 164:	00 d0       	rcall	.+0      	; 0x166 <DIO_u8SetPortValue+0x6>
 166:	0f 92       	push	r0
 168:	cd b7       	in	r28, 0x3d	; 61
 16a:	de b7       	in	r29, 0x3e	; 62
 16c:	9a 83       	std	Y+2, r25	; 0x02
 16e:	89 83       	std	Y+1, r24	; 0x01
 170:	6b 83       	std	Y+3, r22	; 0x03

	while (Copy_PortValue <= DIO_PORT_MAX) // TO MAKE SURE THAT THE ENTERED VALUE IS LEGAL
	{

		(*(Copy_u8_PortName))= Copy_PortValue;  // ASSIGNING THE VALUE TO THE REQUIRED PORT
 172:	e9 81       	ldd	r30, Y+1	; 0x01
 174:	fa 81       	ldd	r31, Y+2	; 0x02
 176:	8b 81       	ldd	r24, Y+3	; 0x03
 178:	80 83       	st	Z, r24
		return 0;
 17a:	80 e0       	ldi	r24, 0x00	; 0
	}

	return -1;  // RETURNING THE ERROR INDICATOR INCASE OF ANY UNEXPECTED EVENT
}
 17c:	0f 90       	pop	r0
 17e:	0f 90       	pop	r0
 180:	0f 90       	pop	r0
 182:	cf 91       	pop	r28
 184:	df 91       	pop	r29
 186:	08 95       	ret

00000188 <DIO_u8SetPinValue>:
 * **************************************************************************************************************/



u8 DIO_u8SetPinValue(pu8 Copy_u8_PortName , u8 Copy_u8_PinNumber,u8 Copy_u8_PinValue)
{
 188:	df 93       	push	r29
 18a:	cf 93       	push	r28
 18c:	00 d0       	rcall	.+0      	; 0x18e <DIO_u8SetPinValue+0x6>
 18e:	00 d0       	rcall	.+0      	; 0x190 <DIO_u8SetPinValue+0x8>
 190:	0f 92       	push	r0
 192:	cd b7       	in	r28, 0x3d	; 61
 194:	de b7       	in	r29, 0x3e	; 62
 196:	9a 83       	std	Y+2, r25	; 0x02
 198:	89 83       	std	Y+1, r24	; 0x01
 19a:	6b 83       	std	Y+3, r22	; 0x03
 19c:	4c 83       	std	Y+4, r20	; 0x04

		if(Copy_u8_PinValue == DIO_LOW)
 19e:	8c 81       	ldd	r24, Y+4	; 0x04
 1a0:	88 23       	and	r24, r24
 1a2:	b1 f4       	brne	.+44     	; 0x1d0 <DIO_u8SetPinValue+0x48>
				{
				clrBit(*(Copy_u8_PortName),Copy_u8_PinNumber);
 1a4:	e9 81       	ldd	r30, Y+1	; 0x01
 1a6:	fa 81       	ldd	r31, Y+2	; 0x02
 1a8:	80 81       	ld	r24, Z
 1aa:	48 2f       	mov	r20, r24
 1ac:	8b 81       	ldd	r24, Y+3	; 0x03
 1ae:	28 2f       	mov	r18, r24
 1b0:	30 e0       	ldi	r19, 0x00	; 0
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	02 2e       	mov	r0, r18
 1b8:	02 c0       	rjmp	.+4      	; 0x1be <DIO_u8SetPinValue+0x36>
 1ba:	88 0f       	add	r24, r24
 1bc:	99 1f       	adc	r25, r25
 1be:	0a 94       	dec	r0
 1c0:	e2 f7       	brpl	.-8      	; 0x1ba <DIO_u8SetPinValue+0x32>
 1c2:	80 95       	com	r24
 1c4:	84 23       	and	r24, r20
 1c6:	e9 81       	ldd	r30, Y+1	; 0x01
 1c8:	fa 81       	ldd	r31, Y+2	; 0x02
 1ca:	80 83       	st	Z, r24
				return 0;
 1cc:	1d 82       	std	Y+5, r1	; 0x05
 1ce:	2e c0       	rjmp	.+92     	; 0x22c <DIO_u8SetPinValue+0xa4>
				}
		else if (Copy_u8_PinValue == DIO_HIGH)
 1d0:	8c 81       	ldd	r24, Y+4	; 0x04
 1d2:	81 30       	cpi	r24, 0x01	; 1
 1d4:	a9 f4       	brne	.+42     	; 0x200 <DIO_u8SetPinValue+0x78>
			{
				setBit(*(Copy_u8_PortName),Copy_u8_PinNumber);
 1d6:	e9 81       	ldd	r30, Y+1	; 0x01
 1d8:	fa 81       	ldd	r31, Y+2	; 0x02
 1da:	80 81       	ld	r24, Z
 1dc:	48 2f       	mov	r20, r24
 1de:	8b 81       	ldd	r24, Y+3	; 0x03
 1e0:	28 2f       	mov	r18, r24
 1e2:	30 e0       	ldi	r19, 0x00	; 0
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	02 2e       	mov	r0, r18
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <DIO_u8SetPinValue+0x68>
 1ec:	88 0f       	add	r24, r24
 1ee:	99 1f       	adc	r25, r25
 1f0:	0a 94       	dec	r0
 1f2:	e2 f7       	brpl	.-8      	; 0x1ec <DIO_u8SetPinValue+0x64>
 1f4:	84 2b       	or	r24, r20
 1f6:	e9 81       	ldd	r30, Y+1	; 0x01
 1f8:	fa 81       	ldd	r31, Y+2	; 0x02
 1fa:	80 83       	st	Z, r24
				return 0;
 1fc:	1d 82       	std	Y+5, r1	; 0x05
 1fe:	16 c0       	rjmp	.+44     	; 0x22c <DIO_u8SetPinValue+0xa4>
			}
			else
			{
				clrBit(*(Copy_u8_PortName),Copy_u8_PinNumber);
 200:	e9 81       	ldd	r30, Y+1	; 0x01
 202:	fa 81       	ldd	r31, Y+2	; 0x02
 204:	80 81       	ld	r24, Z
 206:	48 2f       	mov	r20, r24
 208:	8b 81       	ldd	r24, Y+3	; 0x03
 20a:	28 2f       	mov	r18, r24
 20c:	30 e0       	ldi	r19, 0x00	; 0
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	02 2e       	mov	r0, r18
 214:	02 c0       	rjmp	.+4      	; 0x21a <DIO_u8SetPinValue+0x92>
 216:	88 0f       	add	r24, r24
 218:	99 1f       	adc	r25, r25
 21a:	0a 94       	dec	r0
 21c:	e2 f7       	brpl	.-8      	; 0x216 <DIO_u8SetPinValue+0x8e>
 21e:	80 95       	com	r24
 220:	84 23       	and	r24, r20
 222:	e9 81       	ldd	r30, Y+1	; 0x01
 224:	fa 81       	ldd	r31, Y+2	; 0x02
 226:	80 83       	st	Z, r24

				return -1;
 228:	8f ef       	ldi	r24, 0xFF	; 255
 22a:	8d 83       	std	Y+5, r24	; 0x05
 22c:	8d 81       	ldd	r24, Y+5	; 0x05
			}

return -1; // RETURNING THE ERROR INDICATOR INCASE OF ANY UNEXPECTED EVENT

}
 22e:	0f 90       	pop	r0
 230:	0f 90       	pop	r0
 232:	0f 90       	pop	r0
 234:	0f 90       	pop	r0
 236:	0f 90       	pop	r0
 238:	cf 91       	pop	r28
 23a:	df 91       	pop	r29
 23c:	08 95       	ret

0000023e <DIO_u8GetPortValue>:
 * **************************************************************************************************************/



u8 DIO_u8GetPortValue(u8 Copy_u8_PortName)
{
 23e:	df 93       	push	r29
 240:	cf 93       	push	r28
 242:	0f 92       	push	r0
 244:	cd b7       	in	r28, 0x3d	; 61
 246:	de b7       	in	r29, 0x3e	; 62
 248:	89 83       	std	Y+1, r24	; 0x01

return Copy_u8_PortName;
 24a:	89 81       	ldd	r24, Y+1	; 0x01


}
 24c:	0f 90       	pop	r0
 24e:	cf 91       	pop	r28
 250:	df 91       	pop	r29
 252:	08 95       	ret

00000254 <DIO_u8GetPinValue>:
 * 																												*
 * 																												*
 * **************************************************************************************************************/

u8 DIO_u8GetPinValue(u8 Copy_u8_PortName , u8 Copy_u8_PinNumber)
{
 254:	df 93       	push	r29
 256:	cf 93       	push	r28
 258:	00 d0       	rcall	.+0      	; 0x25a <DIO_u8GetPinValue+0x6>
 25a:	0f 92       	push	r0
 25c:	cd b7       	in	r28, 0x3d	; 61
 25e:	de b7       	in	r29, 0x3e	; 62
 260:	89 83       	std	Y+1, r24	; 0x01
 262:	6a 83       	std	Y+2, r22	; 0x02
	while (Copy_u8_PinNumber <= 7)
 264:	8a 81       	ldd	r24, Y+2	; 0x02
 266:	88 30       	cpi	r24, 0x08	; 8
 268:	88 f4       	brcc	.+34     	; 0x28c <DIO_u8GetPinValue+0x38>
	{
		return (getBit(Copy_u8_PortName,Copy_u8_PinNumber));
 26a:	89 81       	ldd	r24, Y+1	; 0x01
 26c:	28 2f       	mov	r18, r24
 26e:	30 e0       	ldi	r19, 0x00	; 0
 270:	8a 81       	ldd	r24, Y+2	; 0x02
 272:	88 2f       	mov	r24, r24
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	a9 01       	movw	r20, r18
 278:	02 c0       	rjmp	.+4      	; 0x27e <DIO_u8GetPinValue+0x2a>
 27a:	55 95       	asr	r21
 27c:	47 95       	ror	r20
 27e:	8a 95       	dec	r24
 280:	e2 f7       	brpl	.-8      	; 0x27a <DIO_u8GetPinValue+0x26>
 282:	ca 01       	movw	r24, r20
 284:	58 2f       	mov	r21, r24
 286:	51 70       	andi	r21, 0x01	; 1
 288:	5b 83       	std	Y+3, r21	; 0x03
 28a:	02 c0       	rjmp	.+4      	; 0x290 <DIO_u8GetPinValue+0x3c>
	}

return -1;  // RETURNING THE ERROR INDICATOR INCASE OF ANY UNEXPECTED EVENT
 28c:	8f ef       	ldi	r24, 0xFF	; 255
 28e:	8b 83       	std	Y+3, r24	; 0x03
 290:	8b 81       	ldd	r24, Y+3	; 0x03
}
 292:	0f 90       	pop	r0
 294:	0f 90       	pop	r0
 296:	0f 90       	pop	r0
 298:	cf 91       	pop	r28
 29a:	df 91       	pop	r29
 29c:	08 95       	ret

0000029e <DIO_voidInitialize>:
 *      Author: Russel
 */

#include "DIO_voidInitialize.h"
void DIO_voidInitialize()
{
 29e:	df 93       	push	r29
 2a0:	cf 93       	push	r28
 2a2:	cd b7       	in	r28, 0x3d	; 61
 2a4:	de b7       	in	r29, 0x3e	; 62

DDRA = DDRA_VALUE( DIO_u8PINA_0_DIRECTION , DIO_u8PINA_1_DIRECTION , DIO_u8PINA_2_DIRECTION,
 2a6:	ea e3       	ldi	r30, 0x3A	; 58
 2a8:	f0 e0       	ldi	r31, 0x00	; 0
 2aa:	8f ef       	ldi	r24, 0xFF	; 255
 2ac:	80 83       	st	Z, r24
		DIO_u8PINA_3_DIRECTION,DIO_u8PINA_4_DIRECTION,DIO_u8PINA_5_DIRECTION,DIO_u8PINA_6_DIRECTION,DIO_u8PINA_7_DIRECTION);

DDRB = DDRB_VALUE(DIO_u8PINB_0_DIRECTION,DIO_u8PINB_1_DIRECTION, DIO_u8PINB_2_DIRECTION,
 2ae:	e7 e3       	ldi	r30, 0x37	; 55
 2b0:	f0 e0       	ldi	r31, 0x00	; 0
 2b2:	10 82       	st	Z, r1

		DIO_u8PINB_3_DIRECTION , DIO_u8PINB_4_DIRECTION, DIO_u8PINB_5_DIRECTION,DIO_u8PINB_6_DIRECTION,DIO_u8PINB_7_DIRECTION);

DDRC=DDRC_VALUE(DIO_u8PINC_0_DIRECTION,DIO_u8PINC_1_DIRECTION,DIO_u8PINC_2_DIRECTION,
 2b4:	e4 e3       	ldi	r30, 0x34	; 52
 2b6:	f0 e0       	ldi	r31, 0x00	; 0
 2b8:	10 82       	st	Z, r1
		DIO_u8PINC_3_DIRECTION,DIO_u8PINC_4_DIRECTION,DIO_u8PINC_5_DIRECTION,DIO_u8PINC_6_DIRECTION,DIO_u8PINC_7_DIRECTION);

DDRD=DDRD_VALUE(DIO_u8PIND_0_DIRECTION,DIO_u8PIND_1_DIRECTION,DIO_u8PIND_2_DIRECTION,
 2ba:	e1 e3       	ldi	r30, 0x31	; 49
 2bc:	f0 e0       	ldi	r31, 0x00	; 0
 2be:	10 82       	st	Z, r1
		DIO_u8PIND_3_DIRECTION,DIO_u8PIND_4_DIRECTION,DIO_u8PIND_5_DIRECTION,DIO_u8PIND_6_DIRECTION,DIO_u8PIND_7_DIRECTION);



PORTA=PORTA_VALUE(DIO_u8PINA_0_INITIAL,DIO_u8PINA_1_INITIAL,DIO_u8PINA_2_INITIAL,DIO_u8PINA_3_INITIAL,DIO_u8PINA_4_INITIAL,
 2c0:	eb e3       	ldi	r30, 0x3B	; 59
 2c2:	f0 e0       	ldi	r31, 0x00	; 0
 2c4:	10 82       	st	Z, r1
		DIO_u8PINA_5_INITIAL,DIO_u8PINA_6_INITIAL,DIO_u8PINA_7_INITIAL);

PORTB=PORTB_VALUE(DIO_u8PINB_0_INITIAL,DIO_u8PINB_1_INITIAL,DIO_u8PINB_2_INITIAL,DIO_u8PINB_3_INITIAL,DIO_u8PINB_4_INITIAL,
 2c6:	e8 e3       	ldi	r30, 0x38	; 56
 2c8:	f0 e0       	ldi	r31, 0x00	; 0
 2ca:	10 82       	st	Z, r1
		DIO_u8PINB_5_INITIAL,DIO_u8PINB_6_INITIAL,DIO_u8PINB_7_INITIAL);

PORTC=PORTC_VALUE(DIO_u8PINC_0_INITIAL,DIO_u8PINC_1_INITIAL,DIO_u8PINC_2_INITIAL,DIO_u8PINC_3_INITIAL,DIO_u8PINC_4_INITIAL,
 2cc:	e5 e3       	ldi	r30, 0x35	; 53
 2ce:	f0 e0       	ldi	r31, 0x00	; 0
 2d0:	10 82       	st	Z, r1
		DIO_u8PINC_5_INITIAL,DIO_u8PINC_6_INITIAL,DIO_u8PINC_7_INITIAL);

PORTD=PORTD_VALUE(DIO_u8PIND_0_INITIAL,DIO_u8PIND_1_INITIAL,DIO_u8PIND_2_INITIAL,DIO_u8PIND_3_INITIAL,DIO_u8PIND_4_INITIAL,
 2d2:	e2 e3       	ldi	r30, 0x32	; 50
 2d4:	f0 e0       	ldi	r31, 0x00	; 0
 2d6:	10 82       	st	Z, r1
		DIO_u8PIND_5_INITIAL,DIO_u8PIND_6_INITIAL,DIO_u8PIND_7_INITIAL);

}
 2d8:	cf 91       	pop	r28
 2da:	df 91       	pop	r29
 2dc:	08 95       	ret

000002de <LCD_voidWriteCommand>:
#include "std_types.h" // DATA TYPES HEADER FILE
#include "utils.h" // BIT CALCULATION HEADER FILE


void LCD_voidWriteCommand(u8 Copy_Command)
{
 2de:	df 93       	push	r29
 2e0:	cf 93       	push	r28
 2e2:	0f 92       	push	r0
 2e4:	cd b7       	in	r28, 0x3d	; 61
 2e6:	de b7       	in	r29, 0x3e	; 62
 2e8:	89 83       	std	Y+1, r24	; 0x01

	DIO_u8SetPinValue(PORT_A,PINA_2,DIO_LOW);
 2ea:	8b e3       	ldi	r24, 0x3B	; 59
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	62 e0       	ldi	r22, 0x02	; 2
 2f0:	40 e0       	ldi	r20, 0x00	; 0
 2f2:	0e 94 c4 00 	call	0x188	; 0x188 <DIO_u8SetPinValue>

DIO_u8SetPinValue(PORT_A,PINA_0,DIO_LOW);
 2f6:	8b e3       	ldi	r24, 0x3B	; 59
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	60 e0       	ldi	r22, 0x00	; 0
 2fc:	40 e0       	ldi	r20, 0x00	; 0
 2fe:	0e 94 c4 00 	call	0x188	; 0x188 <DIO_u8SetPinValue>
DIO_u8SetPinValue(PORT_A,PINA_1,DIO_LOW);
 302:	8b e3       	ldi	r24, 0x3B	; 59
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	61 e0       	ldi	r22, 0x01	; 1
 308:	40 e0       	ldi	r20, 0x00	; 0
 30a:	0e 94 c4 00 	call	0x188	; 0x188 <DIO_u8SetPinValue>
DIO_u8SetPortValue(PORT_D,Copy_Command);
 30e:	82 e3       	ldi	r24, 0x32	; 50
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	69 81       	ldd	r22, Y+1	; 0x01
 314:	0e 94 b0 00 	call	0x160	; 0x160 <DIO_u8SetPortValue>
DIO_u8SetPinValue(PORT_A,PINA_2,DIO_HIGH);
 318:	8b e3       	ldi	r24, 0x3B	; 59
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	62 e0       	ldi	r22, 0x02	; 2
 31e:	41 e0       	ldi	r20, 0x01	; 1
 320:	0e 94 c4 00 	call	0x188	; 0x188 <DIO_u8SetPinValue>
delay_ms(2);
 324:	62 e0       	ldi	r22, 0x02	; 2
 326:	70 e0       	ldi	r23, 0x00	; 0
 328:	80 e0       	ldi	r24, 0x00	; 0
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	0e 94 f7 01 	call	0x3ee	; 0x3ee <delay_ms>
DIO_u8SetPinValue(PORT_A,PINA_2,DIO_LOW);
 330:	8b e3       	ldi	r24, 0x3B	; 59
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	62 e0       	ldi	r22, 0x02	; 2
 336:	40 e0       	ldi	r20, 0x00	; 0
 338:	0e 94 c4 00 	call	0x188	; 0x188 <DIO_u8SetPinValue>
}
 33c:	0f 90       	pop	r0
 33e:	cf 91       	pop	r28
 340:	df 91       	pop	r29
 342:	08 95       	ret

00000344 <LCD_voidWriteData>:


void LCD_voidWriteData(u8 Copy_Data)
{
 344:	df 93       	push	r29
 346:	cf 93       	push	r28
 348:	0f 92       	push	r0
 34a:	cd b7       	in	r28, 0x3d	; 61
 34c:	de b7       	in	r29, 0x3e	; 62
 34e:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8SetPinValue(PORT_A,PINA_2,DIO_LOW);
 350:	8b e3       	ldi	r24, 0x3B	; 59
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	62 e0       	ldi	r22, 0x02	; 2
 356:	40 e0       	ldi	r20, 0x00	; 0
 358:	0e 94 c4 00 	call	0x188	; 0x188 <DIO_u8SetPinValue>

	DIO_u8SetPinValue(PORT_A,PINA_0,DIO_HIGH);
 35c:	8b e3       	ldi	r24, 0x3B	; 59
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	60 e0       	ldi	r22, 0x00	; 0
 362:	41 e0       	ldi	r20, 0x01	; 1
 364:	0e 94 c4 00 	call	0x188	; 0x188 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(PORT_A,PINA_1,DIO_LOW);
 368:	8b e3       	ldi	r24, 0x3B	; 59
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	61 e0       	ldi	r22, 0x01	; 1
 36e:	40 e0       	ldi	r20, 0x00	; 0
 370:	0e 94 c4 00 	call	0x188	; 0x188 <DIO_u8SetPinValue>
	DIO_u8SetPortValue(PORT_D,Copy_Data);
 374:	82 e3       	ldi	r24, 0x32	; 50
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	69 81       	ldd	r22, Y+1	; 0x01
 37a:	0e 94 b0 00 	call	0x160	; 0x160 <DIO_u8SetPortValue>
	DIO_u8SetPinValue(PORT_A,PINA_2,DIO_HIGH);
 37e:	8b e3       	ldi	r24, 0x3B	; 59
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	62 e0       	ldi	r22, 0x02	; 2
 384:	41 e0       	ldi	r20, 0x01	; 1
 386:	0e 94 c4 00 	call	0x188	; 0x188 <DIO_u8SetPinValue>
	delay_ms(2);
 38a:	62 e0       	ldi	r22, 0x02	; 2
 38c:	70 e0       	ldi	r23, 0x00	; 0
 38e:	80 e0       	ldi	r24, 0x00	; 0
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	0e 94 f7 01 	call	0x3ee	; 0x3ee <delay_ms>

	DIO_u8SetPinValue(PORT_A,PINA_2,DIO_LOW);
 396:	8b e3       	ldi	r24, 0x3B	; 59
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	62 e0       	ldi	r22, 0x02	; 2
 39c:	40 e0       	ldi	r20, 0x00	; 0
 39e:	0e 94 c4 00 	call	0x188	; 0x188 <DIO_u8SetPinValue>
}
 3a2:	0f 90       	pop	r0
 3a4:	cf 91       	pop	r28
 3a6:	df 91       	pop	r29
 3a8:	08 95       	ret

000003aa <LCD_voidInit>:

void LCD_voidInit(void)
{
 3aa:	df 93       	push	r29
 3ac:	cf 93       	push	r28
 3ae:	cd b7       	in	r28, 0x3d	; 61
 3b0:	de b7       	in	r29, 0x3e	; 62

delay_ms(50);
 3b2:	62 e3       	ldi	r22, 0x32	; 50
 3b4:	70 e0       	ldi	r23, 0x00	; 0
 3b6:	80 e0       	ldi	r24, 0x00	; 0
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	0e 94 f7 01 	call	0x3ee	; 0x3ee <delay_ms>

LCD_voidWriteCommand(0b00111000); // 0b 0011NFxx  N Number of lines F Font
 3be:	88 e3       	ldi	r24, 0x38	; 56
 3c0:	0e 94 6f 01 	call	0x2de	; 0x2de <LCD_voidWriteCommand>
delay_ms(2);
 3c4:	62 e0       	ldi	r22, 0x02	; 2
 3c6:	70 e0       	ldi	r23, 0x00	; 0
 3c8:	80 e0       	ldi	r24, 0x00	; 0
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	0e 94 f7 01 	call	0x3ee	; 0x3ee <delay_ms>
LCD_voidWriteCommand(0b00001100); //0b00001DCB 	D Display ON OFF  C Cursor ON OFF B Cursor Blink
 3d0:	8c e0       	ldi	r24, 0x0C	; 12
 3d2:	0e 94 6f 01 	call	0x2de	; 0x2de <LCD_voidWriteCommand>
delay_ms(2);
 3d6:	62 e0       	ldi	r22, 0x02	; 2
 3d8:	70 e0       	ldi	r23, 0x00	; 0
 3da:	80 e0       	ldi	r24, 0x00	; 0
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	0e 94 f7 01 	call	0x3ee	; 0x3ee <delay_ms>
LCD_voidWriteCommand(0b00000001); //CLEAR THE LCD
 3e2:	81 e0       	ldi	r24, 0x01	; 1
 3e4:	0e 94 6f 01 	call	0x2de	; 0x2de <LCD_voidWriteCommand>

}
 3e8:	cf 91       	pop	r28
 3ea:	df 91       	pop	r29
 3ec:	08 95       	ret

000003ee <delay_ms>:
 *  Created on: Dec 13, 2016
 *      Author: Russel
 */
#include "delay_ms.h"

void delay_ms(u32 delay_Value){
 3ee:	df 93       	push	r29
 3f0:	cf 93       	push	r28
 3f2:	cd b7       	in	r28, 0x3d	; 61
 3f4:	de b7       	in	r29, 0x3e	; 62
 3f6:	28 97       	sbiw	r28, 0x08	; 8
 3f8:	0f b6       	in	r0, 0x3f	; 63
 3fa:	f8 94       	cli
 3fc:	de bf       	out	0x3e, r29	; 62
 3fe:	0f be       	out	0x3f, r0	; 63
 400:	cd bf       	out	0x3d, r28	; 61
 402:	6d 83       	std	Y+5, r22	; 0x05
 404:	7e 83       	std	Y+6, r23	; 0x06
 406:	8f 83       	std	Y+7, r24	; 0x07
 408:	98 87       	std	Y+8, r25	; 0x08
 40a:	25 c0       	rjmp	.+74     	; 0x456 <delay_ms+0x68>
u32 counter;
while (delay_Value)
{
	//112 is the right one

	for (counter=MIN_FOR_NOP;counter<MAX__FOR_NOP;counter++)
 40c:	19 82       	std	Y+1, r1	; 0x01
 40e:	1a 82       	std	Y+2, r1	; 0x02
 410:	1b 82       	std	Y+3, r1	; 0x03
 412:	1c 82       	std	Y+4, r1	; 0x04
 414:	0c c0       	rjmp	.+24     	; 0x42e <delay_ms+0x40>
	{
		asm ("nop");
 416:	00 00       	nop
u32 counter;
while (delay_Value)
{
	//112 is the right one

	for (counter=MIN_FOR_NOP;counter<MAX__FOR_NOP;counter++)
 418:	89 81       	ldd	r24, Y+1	; 0x01
 41a:	9a 81       	ldd	r25, Y+2	; 0x02
 41c:	ab 81       	ldd	r26, Y+3	; 0x03
 41e:	bc 81       	ldd	r27, Y+4	; 0x04
 420:	01 96       	adiw	r24, 0x01	; 1
 422:	a1 1d       	adc	r26, r1
 424:	b1 1d       	adc	r27, r1
 426:	89 83       	std	Y+1, r24	; 0x01
 428:	9a 83       	std	Y+2, r25	; 0x02
 42a:	ab 83       	std	Y+3, r26	; 0x03
 42c:	bc 83       	std	Y+4, r27	; 0x04
 42e:	89 81       	ldd	r24, Y+1	; 0x01
 430:	9a 81       	ldd	r25, Y+2	; 0x02
 432:	ab 81       	ldd	r26, Y+3	; 0x03
 434:	bc 81       	ldd	r27, Y+4	; 0x04
 436:	8f 36       	cpi	r24, 0x6F	; 111
 438:	91 05       	cpc	r25, r1
 43a:	a1 05       	cpc	r26, r1
 43c:	b1 05       	cpc	r27, r1
 43e:	58 f3       	brcs	.-42     	; 0x416 <delay_ms+0x28>
	{
		asm ("nop");

	}

delay_Value--;
 440:	8d 81       	ldd	r24, Y+5	; 0x05
 442:	9e 81       	ldd	r25, Y+6	; 0x06
 444:	af 81       	ldd	r26, Y+7	; 0x07
 446:	b8 85       	ldd	r27, Y+8	; 0x08
 448:	01 97       	sbiw	r24, 0x01	; 1
 44a:	a1 09       	sbc	r26, r1
 44c:	b1 09       	sbc	r27, r1
 44e:	8d 83       	std	Y+5, r24	; 0x05
 450:	9e 83       	std	Y+6, r25	; 0x06
 452:	af 83       	std	Y+7, r26	; 0x07
 454:	b8 87       	std	Y+8, r27	; 0x08
 */
#include "delay_ms.h"

void delay_ms(u32 delay_Value){
u32 counter;
while (delay_Value)
 456:	8d 81       	ldd	r24, Y+5	; 0x05
 458:	9e 81       	ldd	r25, Y+6	; 0x06
 45a:	af 81       	ldd	r26, Y+7	; 0x07
 45c:	b8 85       	ldd	r27, Y+8	; 0x08
 45e:	00 97       	sbiw	r24, 0x00	; 0
 460:	a1 05       	cpc	r26, r1
 462:	b1 05       	cpc	r27, r1
 464:	99 f6       	brne	.-90     	; 0x40c <delay_ms+0x1e>
delay_Value--;
}



}
 466:	28 96       	adiw	r28, 0x08	; 8
 468:	0f b6       	in	r0, 0x3f	; 63
 46a:	f8 94       	cli
 46c:	de bf       	out	0x3e, r29	; 62
 46e:	0f be       	out	0x3f, r0	; 63
 470:	cd bf       	out	0x3d, r28	; 61
 472:	cf 91       	pop	r28
 474:	df 91       	pop	r29
 476:	08 95       	ret

00000478 <main>:
#include "util/delay.h"

#include "std_types.h" // DATA TYPES HEADER FILE
#include "utils.h" // BIT CALCULATION HEADER FILE
void main(void)
{
 478:	df 93       	push	r29
 47a:	cf 93       	push	r28
 47c:	cd b7       	in	r28, 0x3d	; 61
 47e:	de b7       	in	r29, 0x3e	; 62
 480:	c7 57       	subi	r28, 0x77	; 119
 482:	d0 40       	sbci	r29, 0x00	; 0
 484:	0f b6       	in	r0, 0x3f	; 63
 486:	f8 94       	cli
 488:	de bf       	out	0x3e, r29	; 62
 48a:	0f be       	out	0x3f, r0	; 63
 48c:	cd bf       	out	0x3d, r28	; 61

// Tasks Number 1 & 2 & 3 varaibles//

	u8 i,j,base_cgr=0x40,base_ddr=0x80,lcd_counter=0;
 48e:	80 e4       	ldi	r24, 0x40	; 64
 490:	8b 8b       	std	Y+19, r24	; 0x13
 492:	80 e8       	ldi	r24, 0x80	; 128
 494:	8a 8b       	std	Y+18, r24	; 0x12
 496:	19 8a       	std	Y+17, r1	; 0x11
	u8 Local_TemporaryHolder=0,Local_DigitHolder;
 498:	18 8a       	std	Y+16, r1	; 0x10
	u8 Local_Counter=0,Local_Counter2=0,Local_FirstDigitFlag=0,Local_SecondDigitFlag=0,Local_ThirdDigitFlag=0,Local_FourthDigitFlag=1;
 49a:	1e 86       	std	Y+14, r1	; 0x0e
 49c:	1d 86       	std	Y+13, r1	; 0x0d
 49e:	1c 86       	std	Y+12, r1	; 0x0c
 4a0:	1b 86       	std	Y+11, r1	; 0x0b
 4a2:	1a 86       	std	Y+10, r1	; 0x0a
 4a4:	81 e0       	ldi	r24, 0x01	; 1
 4a6:	89 87       	std	Y+9, r24	; 0x09
	u8 Local_PlusFlag=0,Local_MinusFlag=0,Local_DivisionFlag=0,Local_MultiplyFlag=0;
 4a8:	18 86       	std	Y+8, r1	; 0x08
 4aa:	1f 82       	std	Y+7, r1	; 0x07
 4ac:	1e 82       	std	Y+6, r1	; 0x06
 4ae:	1d 82       	std	Y+5, r1	; 0x05
	u8 Local_SignHolder =0;
 4b0:	1c 82       	std	Y+4, r1	; 0x04
	u8 Local_TemporaryCounter=0,Local_TemporaryCounter2=0;
 4b2:	1b 82       	std	Y+3, r1	; 0x03
 4b4:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_Result=0;
 4b6:	19 82       	std	Y+1, r1	; 0x01
	DIO_u8SetPortDirection(DDR_A,DIO_PORT_OUTPUT); //7 SEGEMENT MODES WIRES Task 1 & 2 &3
 4b8:	8a e3       	ldi	r24, 0x3A	; 58
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	6f ef       	ldi	r22, 0xFF	; 255
 4be:	0e 94 41 00 	call	0x82	; 0x82 <DIO_u8SetPortDirection>
	DIO_u8SetPortDirection(DDR_D,DIO_PORT_OUTPUT); // SEVEN SEGEMENTS DATA Task 1 & 2 & 3
 4c2:	81 e3       	ldi	r24, 0x31	; 49
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	6f ef       	ldi	r22, 0xFF	; 255
 4c8:	0e 94 41 00 	call	0x82	; 0x82 <DIO_u8SetPortDirection>
	DIO_u8SetPortDirection(DDR_B,DIO_PORT_INPUT); //Task 2 & 3 DIP SWITCH TASK 3 5 SWITCHES
 4cc:	87 e3       	ldi	r24, 0x37	; 55
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	60 e0       	ldi	r22, 0x00	; 0
 4d2:	0e 94 41 00 	call	0x82	; 0x82 <DIO_u8SetPortDirection>
	DIO_u8SetPinDirection (DDR_C,PINA_0,DIO_INPUT); //Task 2 CHOICE SWITCH
 4d6:	84 e3       	ldi	r24, 0x34	; 52
 4d8:	90 e0       	ldi	r25, 0x00	; 0
 4da:	60 e0       	ldi	r22, 0x00	; 0
 4dc:	40 e0       	ldi	r20, 0x00	; 0
 4de:	0e 94 69 00 	call	0xd2	; 0xd2 <DIO_u8SetPinDirection>
				  0b11000011,
				  0b01100110,
				  0b00100100,
				  0b00000000,
				  0b00000000
		}};
 4e2:	ce 01       	movw	r24, r28
 4e4:	46 96       	adiw	r24, 0x16	; 22
 4e6:	e0 96       	adiw	r28, 0x30	; 48
 4e8:	9f af       	std	Y+63, r25	; 0x3f
 4ea:	8e af       	std	Y+62, r24	; 0x3e
 4ec:	e0 97       	sbiw	r28, 0x30	; 48
 4ee:	e0 ea       	ldi	r30, 0xA0	; 160
 4f0:	f0 e0       	ldi	r31, 0x00	; 0
 4f2:	e2 96       	adiw	r28, 0x32	; 50
 4f4:	ff af       	std	Y+63, r31	; 0x3f
 4f6:	ee af       	std	Y+62, r30	; 0x3e
 4f8:	e2 97       	sbiw	r28, 0x32	; 50
 4fa:	f8 e1       	ldi	r31, 0x18	; 24
 4fc:	e3 96       	adiw	r28, 0x33	; 51
 4fe:	ff af       	std	Y+63, r31	; 0x3f
 500:	e3 97       	sbiw	r28, 0x33	; 51
 502:	e2 96       	adiw	r28, 0x32	; 50
 504:	ee ad       	ldd	r30, Y+62	; 0x3e
 506:	ff ad       	ldd	r31, Y+63	; 0x3f
 508:	e2 97       	sbiw	r28, 0x32	; 50
 50a:	00 80       	ld	r0, Z
 50c:	e2 96       	adiw	r28, 0x32	; 50
 50e:	8e ad       	ldd	r24, Y+62	; 0x3e
 510:	9f ad       	ldd	r25, Y+63	; 0x3f
 512:	e2 97       	sbiw	r28, 0x32	; 50
 514:	01 96       	adiw	r24, 0x01	; 1
 516:	e2 96       	adiw	r28, 0x32	; 50
 518:	9f af       	std	Y+63, r25	; 0x3f
 51a:	8e af       	std	Y+62, r24	; 0x3e
 51c:	e2 97       	sbiw	r28, 0x32	; 50
 51e:	e0 96       	adiw	r28, 0x30	; 48
 520:	ee ad       	ldd	r30, Y+62	; 0x3e
 522:	ff ad       	ldd	r31, Y+63	; 0x3f
 524:	e0 97       	sbiw	r28, 0x30	; 48
 526:	00 82       	st	Z, r0
 528:	e0 96       	adiw	r28, 0x30	; 48
 52a:	8e ad       	ldd	r24, Y+62	; 0x3e
 52c:	9f ad       	ldd	r25, Y+63	; 0x3f
 52e:	e0 97       	sbiw	r28, 0x30	; 48
 530:	01 96       	adiw	r24, 0x01	; 1
 532:	e0 96       	adiw	r28, 0x30	; 48
 534:	9f af       	std	Y+63, r25	; 0x3f
 536:	8e af       	std	Y+62, r24	; 0x3e
 538:	e0 97       	sbiw	r28, 0x30	; 48
 53a:	e3 96       	adiw	r28, 0x33	; 51
 53c:	9f ad       	ldd	r25, Y+63	; 0x3f
 53e:	e3 97       	sbiw	r28, 0x33	; 51
 540:	91 50       	subi	r25, 0x01	; 1
 542:	e3 96       	adiw	r28, 0x33	; 51
 544:	9f af       	std	Y+63, r25	; 0x3f
 546:	e3 97       	sbiw	r28, 0x33	; 51
 548:	e3 96       	adiw	r28, 0x33	; 51
 54a:	ef ad       	ldd	r30, Y+63	; 0x3f
 54c:	e3 97       	sbiw	r28, 0x33	; 51
 54e:	ee 23       	and	r30, r30
 550:	c1 f6       	brne	.-80     	; 0x502 <main+0x8a>
		  0b00010010,
		  0b00010010,
		  0b00010010,
		  0b00011110,
		  0b00000000
		}};
 552:	ce 01       	movw	r24, r28
 554:	8e 96       	adiw	r24, 0x2e	; 46
 556:	e5 96       	adiw	r28, 0x35	; 53
 558:	9f af       	std	Y+63, r25	; 0x3f
 55a:	8e af       	std	Y+62, r24	; 0x3e
 55c:	e5 97       	sbiw	r28, 0x35	; 53
 55e:	e0 e6       	ldi	r30, 0x60	; 96
 560:	f0 e0       	ldi	r31, 0x00	; 0
 562:	e7 96       	adiw	r28, 0x37	; 55
 564:	ff af       	std	Y+63, r31	; 0x3f
 566:	ee af       	std	Y+62, r30	; 0x3e
 568:	e7 97       	sbiw	r28, 0x37	; 55
 56a:	f0 e4       	ldi	r31, 0x40	; 64
 56c:	e8 96       	adiw	r28, 0x38	; 56
 56e:	ff af       	std	Y+63, r31	; 0x3f
 570:	e8 97       	sbiw	r28, 0x38	; 56
 572:	e7 96       	adiw	r28, 0x37	; 55
 574:	ee ad       	ldd	r30, Y+62	; 0x3e
 576:	ff ad       	ldd	r31, Y+63	; 0x3f
 578:	e7 97       	sbiw	r28, 0x37	; 55
 57a:	00 80       	ld	r0, Z
 57c:	e7 96       	adiw	r28, 0x37	; 55
 57e:	8e ad       	ldd	r24, Y+62	; 0x3e
 580:	9f ad       	ldd	r25, Y+63	; 0x3f
 582:	e7 97       	sbiw	r28, 0x37	; 55
 584:	01 96       	adiw	r24, 0x01	; 1
 586:	e7 96       	adiw	r28, 0x37	; 55
 588:	9f af       	std	Y+63, r25	; 0x3f
 58a:	8e af       	std	Y+62, r24	; 0x3e
 58c:	e7 97       	sbiw	r28, 0x37	; 55
 58e:	e5 96       	adiw	r28, 0x35	; 53
 590:	ee ad       	ldd	r30, Y+62	; 0x3e
 592:	ff ad       	ldd	r31, Y+63	; 0x3f
 594:	e5 97       	sbiw	r28, 0x35	; 53
 596:	00 82       	st	Z, r0
 598:	e5 96       	adiw	r28, 0x35	; 53
 59a:	8e ad       	ldd	r24, Y+62	; 0x3e
 59c:	9f ad       	ldd	r25, Y+63	; 0x3f
 59e:	e5 97       	sbiw	r28, 0x35	; 53
 5a0:	01 96       	adiw	r24, 0x01	; 1
 5a2:	e5 96       	adiw	r28, 0x35	; 53
 5a4:	9f af       	std	Y+63, r25	; 0x3f
 5a6:	8e af       	std	Y+62, r24	; 0x3e
 5a8:	e5 97       	sbiw	r28, 0x35	; 53
 5aa:	e8 96       	adiw	r28, 0x38	; 56
 5ac:	9f ad       	ldd	r25, Y+63	; 0x3f
 5ae:	e8 97       	sbiw	r28, 0x38	; 56
 5b0:	91 50       	subi	r25, 0x01	; 1
 5b2:	e8 96       	adiw	r28, 0x38	; 56
 5b4:	9f af       	std	Y+63, r25	; 0x3f
 5b6:	e8 97       	sbiw	r28, 0x38	; 56
 5b8:	e8 96       	adiw	r28, 0x38	; 56
 5ba:	ef ad       	ldd	r30, Y+63	; 0x3f
 5bc:	e8 97       	sbiw	r28, 0x38	; 56
 5be:	ee 23       	and	r30, r30
 5c0:	c1 f6       	brne	.-80     	; 0x572 <main+0xfa>

LCD_voidInit();
 5c2:	0e 94 d5 01 	call	0x3aa	; 0x3aa <LCD_voidInit>

	for (i=0;i<8;i++)
 5c6:	1d 8a       	std	Y+21, r1	; 0x15
 5c8:	2a c0       	rjmp	.+84     	; 0x61e <main+0x1a6>
	{
		for (j=0;j<8;j++)
 5ca:	1c 8a       	std	Y+20, r1	; 0x14
 5cc:	22 c0       	rjmp	.+68     	; 0x612 <main+0x19a>
		{
			LCD_voidWriteCommand(base_cgr+lcd_counter);
 5ce:	9b 89       	ldd	r25, Y+19	; 0x13
 5d0:	89 89       	ldd	r24, Y+17	; 0x11
 5d2:	89 0f       	add	r24, r25
 5d4:	0e 94 6f 01 	call	0x2de	; 0x2de <LCD_voidWriteCommand>
			LCD_voidWriteData(name[i][j]);
 5d8:	8d 89       	ldd	r24, Y+21	; 0x15
 5da:	28 2f       	mov	r18, r24
 5dc:	30 e0       	ldi	r19, 0x00	; 0
 5de:	8c 89       	ldd	r24, Y+20	; 0x14
 5e0:	48 2f       	mov	r20, r24
 5e2:	50 e0       	ldi	r21, 0x00	; 0
 5e4:	22 0f       	add	r18, r18
 5e6:	33 1f       	adc	r19, r19
 5e8:	22 0f       	add	r18, r18
 5ea:	33 1f       	adc	r19, r19
 5ec:	22 0f       	add	r18, r18
 5ee:	33 1f       	adc	r19, r19
 5f0:	ce 01       	movw	r24, r28
 5f2:	01 96       	adiw	r24, 0x01	; 1
 5f4:	82 0f       	add	r24, r18
 5f6:	93 1f       	adc	r25, r19
 5f8:	84 0f       	add	r24, r20
 5fa:	95 1f       	adc	r25, r21
 5fc:	fc 01       	movw	r30, r24
 5fe:	bd 96       	adiw	r30, 0x2d	; 45
 600:	80 81       	ld	r24, Z
 602:	0e 94 a2 01 	call	0x344	; 0x344 <LCD_voidWriteData>
			lcd_counter++;
 606:	89 89       	ldd	r24, Y+17	; 0x11
 608:	8f 5f       	subi	r24, 0xFF	; 255
 60a:	89 8b       	std	Y+17, r24	; 0x11

LCD_voidInit();

	for (i=0;i<8;i++)
	{
		for (j=0;j<8;j++)
 60c:	8c 89       	ldd	r24, Y+20	; 0x14
 60e:	8f 5f       	subi	r24, 0xFF	; 255
 610:	8c 8b       	std	Y+20, r24	; 0x14
 612:	8c 89       	ldd	r24, Y+20	; 0x14
 614:	88 30       	cpi	r24, 0x08	; 8
 616:	d8 f2       	brcs	.-74     	; 0x5ce <main+0x156>
		  0b00000000
		}};

LCD_voidInit();

	for (i=0;i<8;i++)
 618:	8d 89       	ldd	r24, Y+21	; 0x15
 61a:	8f 5f       	subi	r24, 0xFF	; 255
 61c:	8d 8b       	std	Y+21, r24	; 0x15
 61e:	8d 89       	ldd	r24, Y+21	; 0x15
 620:	88 30       	cpi	r24, 0x08	; 8
 622:	98 f2       	brcs	.-90     	; 0x5ca <main+0x152>
			LCD_voidWriteData(name[i][j]);
			lcd_counter++;
		}

	}
	LCD_voidWriteCommand(base_ddr);
 624:	8a 89       	ldd	r24, Y+18	; 0x12
 626:	0e 94 6f 01 	call	0x2de	; 0x2de <LCD_voidWriteCommand>
	for (i=0;i<8;i++)
 62a:	1d 8a       	std	Y+21, r1	; 0x15
 62c:	06 c0       	rjmp	.+12     	; 0x63a <main+0x1c2>
	{

		LCD_voidWriteData(i);
 62e:	8d 89       	ldd	r24, Y+21	; 0x15
 630:	0e 94 a2 01 	call	0x344	; 0x344 <LCD_voidWriteData>
			lcd_counter++;
		}

	}
	LCD_voidWriteCommand(base_ddr);
	for (i=0;i<8;i++)
 634:	8d 89       	ldd	r24, Y+21	; 0x15
 636:	8f 5f       	subi	r24, 0xFF	; 255
 638:	8d 8b       	std	Y+21, r24	; 0x15
 63a:	8d 89       	ldd	r24, Y+21	; 0x15
 63c:	88 30       	cpi	r24, 0x08	; 8
 63e:	b8 f3       	brcs	.-18     	; 0x62e <main+0x1b6>
 640:	ff cf       	rjmp	.-2      	; 0x640 <main+0x1c8>

00000642 <_exit>:
 642:	f8 94       	cli

00000644 <__stop_program>:
 644:	ff cf       	rjmp	.-2      	; 0x644 <__stop_program>
