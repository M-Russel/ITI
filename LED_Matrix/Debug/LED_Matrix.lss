
LED_Matrix.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003fc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001f6  00800060  000003fc  00000470  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001b3c  00000000  00000000  00000668  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000b7f  00000000  00000000  000021a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  00002d23  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	12 e0       	ldi	r17, 0x02	; 2
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ef       	ldi	r30, 0xFC	; 252
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 35       	cpi	r26, 0x56	; 86
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 dd 01 	call	0x3ba	; 0x3ba <main>
  7a:	0c 94 fc 01 	jmp	0x3f8	; 0x3f8 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <Green>:
 *      Author: Russel
 */

#include "Led_Color.h"

void Green(u32 Delay_Value){
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	69 97       	sbiw	r28, 0x19	; 25
  8c:	0f b6       	in	r0, 0x3f	; 63
  8e:	f8 94       	cli
  90:	de bf       	out	0x3e, r29	; 62
  92:	0f be       	out	0x3f, r0	; 63
  94:	cd bf       	out	0x3d, r28	; 61
  96:	6e 8b       	std	Y+22, r22	; 0x16
  98:	7f 8b       	std	Y+23, r23	; 0x17
  9a:	88 8f       	std	Y+24, r24	; 0x18
  9c:	99 8f       	std	Y+25, r25	; 0x19
u8 counter;
PORTB=GREEN_LED;
  9e:	88 e3       	ldi	r24, 0x38	; 56
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	21 e0       	ldi	r18, 0x01	; 1
  a4:	fc 01       	movw	r30, r24
  a6:	20 83       	st	Z, r18
for (counter=MAX;counter>MIN;counter--)
  a8:	8c e3       	ldi	r24, 0x3C	; 60
  aa:	89 83       	std	Y+1, r24	; 0x01
  ac:	4f c0       	rjmp	.+158    	; 0x14c <Green+0xca>
{
		SEGMENT(PORTD,counter%(TEN));
  ae:	8a e0       	ldi	r24, 0x0A	; 10
  b0:	e0 e1       	ldi	r30, 0x10	; 16
  b2:	f2 e0       	ldi	r31, 0x02	; 2
  b4:	de 01       	movw	r26, r28
  b6:	12 96       	adiw	r26, 0x02	; 2
  b8:	01 90       	ld	r0, Z+
  ba:	0d 92       	st	X+, r0
  bc:	8a 95       	dec	r24
  be:	e1 f7       	brne	.-8      	; 0xb8 <Green+0x36>
  c0:	22 e3       	ldi	r18, 0x32	; 50
  c2:	30 e0       	ldi	r19, 0x00	; 0
  c4:	99 81       	ldd	r25, Y+1	; 0x01
  c6:	8d ec       	ldi	r24, 0xCD	; 205
  c8:	98 9f       	mul	r25, r24
  ca:	81 2d       	mov	r24, r1
  cc:	11 24       	eor	r1, r1
  ce:	86 95       	lsr	r24
  d0:	86 95       	lsr	r24
  d2:	86 95       	lsr	r24
  d4:	88 0f       	add	r24, r24
  d6:	48 2f       	mov	r20, r24
  d8:	44 0f       	add	r20, r20
  da:	44 0f       	add	r20, r20
  dc:	84 0f       	add	r24, r20
  de:	f9 2f       	mov	r31, r25
  e0:	f8 1b       	sub	r31, r24
  e2:	8f 2f       	mov	r24, r31
  e4:	88 2f       	mov	r24, r24
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	ae 01       	movw	r20, r28
  ea:	4e 5f       	subi	r20, 0xFE	; 254
  ec:	5f 4f       	sbci	r21, 0xFF	; 255
  ee:	84 0f       	add	r24, r20
  f0:	95 1f       	adc	r25, r21
  f2:	fc 01       	movw	r30, r24
  f4:	80 81       	ld	r24, Z
  f6:	f9 01       	movw	r30, r18
  f8:	80 83       	st	Z, r24
		SEGMENT(PORTA,(counter/(TEN)));
  fa:	8a e0       	ldi	r24, 0x0A	; 10
  fc:	e0 e1       	ldi	r30, 0x10	; 16
  fe:	f2 e0       	ldi	r31, 0x02	; 2
 100:	de 01       	movw	r26, r28
 102:	1c 96       	adiw	r26, 0x0c	; 12
 104:	01 90       	ld	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	8a 95       	dec	r24
 10a:	e1 f7       	brne	.-8      	; 0x104 <Green+0x82>
 10c:	8b e3       	ldi	r24, 0x3B	; 59
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	39 81       	ldd	r19, Y+1	; 0x01
 112:	2d ec       	ldi	r18, 0xCD	; 205
 114:	32 9f       	mul	r19, r18
 116:	21 2d       	mov	r18, r1
 118:	11 24       	eor	r1, r1
 11a:	26 95       	lsr	r18
 11c:	26 95       	lsr	r18
 11e:	26 95       	lsr	r18
 120:	22 2f       	mov	r18, r18
 122:	30 e0       	ldi	r19, 0x00	; 0
 124:	ae 01       	movw	r20, r28
 126:	44 5f       	subi	r20, 0xF4	; 244
 128:	5f 4f       	sbci	r21, 0xFF	; 255
 12a:	24 0f       	add	r18, r20
 12c:	35 1f       	adc	r19, r21
 12e:	f9 01       	movw	r30, r18
 130:	20 81       	ld	r18, Z
 132:	fc 01       	movw	r30, r24
 134:	20 83       	st	Z, r18
		delay_ms(Delay_Value);
 136:	8e 89       	ldd	r24, Y+22	; 0x16
 138:	9f 89       	ldd	r25, Y+23	; 0x17
 13a:	a8 8d       	ldd	r26, Y+24	; 0x18
 13c:	b9 8d       	ldd	r27, Y+25	; 0x19
 13e:	bc 01       	movw	r22, r24
 140:	cd 01       	movw	r24, r26
 142:	0e 94 98 01 	call	0x330	; 0x330 <delay_ms>
#include "Led_Color.h"

void Green(u32 Delay_Value){
u8 counter;
PORTB=GREEN_LED;
for (counter=MAX;counter>MIN;counter--)
 146:	89 81       	ldd	r24, Y+1	; 0x01
 148:	81 50       	subi	r24, 0x01	; 1
 14a:	89 83       	std	Y+1, r24	; 0x01
 14c:	89 81       	ldd	r24, Y+1	; 0x01
 14e:	88 23       	and	r24, r24
 150:	09 f0       	breq	.+2      	; 0x154 <Green+0xd2>
 152:	ad cf       	rjmp	.-166    	; 0xae <Green+0x2c>
		SEGMENT(PORTD,counter%(TEN));
		SEGMENT(PORTA,(counter/(TEN)));
		delay_ms(Delay_Value);

}
}
 154:	69 96       	adiw	r28, 0x19	; 25
 156:	0f b6       	in	r0, 0x3f	; 63
 158:	f8 94       	cli
 15a:	de bf       	out	0x3e, r29	; 62
 15c:	0f be       	out	0x3f, r0	; 63
 15e:	cd bf       	out	0x3d, r28	; 61
 160:	df 91       	pop	r29
 162:	cf 91       	pop	r28
 164:	08 95       	ret

00000166 <Initializing>:
 *      Author: Russel
 */

#include "Initializing.h"
void Initializing()
{
 166:	cf 93       	push	r28
 168:	df 93       	push	r29
 16a:	cd b7       	in	r28, 0x3d	; 61
 16c:	de b7       	in	r29, 0x3e	; 62


	DDRA=0xff;
 16e:	8a e3       	ldi	r24, 0x3A	; 58
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	2f ef       	ldi	r18, 0xFF	; 255
 174:	fc 01       	movw	r30, r24
 176:	20 83       	st	Z, r18
	DDRB=0xff;
 178:	87 e3       	ldi	r24, 0x37	; 55
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	2f ef       	ldi	r18, 0xFF	; 255
 17e:	fc 01       	movw	r30, r24
 180:	20 83       	st	Z, r18




}
 182:	df 91       	pop	r29
 184:	cf 91       	pop	r28
 186:	08 95       	ret

00000188 <Orange>:
 */

#include "Led_Color.h"


void Orange(u32 Delay_Value){
 188:	cf 93       	push	r28
 18a:	df 93       	push	r29
 18c:	cd b7       	in	r28, 0x3d	; 61
 18e:	de b7       	in	r29, 0x3e	; 62
 190:	69 97       	sbiw	r28, 0x19	; 25
 192:	0f b6       	in	r0, 0x3f	; 63
 194:	f8 94       	cli
 196:	de bf       	out	0x3e, r29	; 62
 198:	0f be       	out	0x3f, r0	; 63
 19a:	cd bf       	out	0x3d, r28	; 61
 19c:	6e 8b       	std	Y+22, r22	; 0x16
 19e:	7f 8b       	std	Y+23, r23	; 0x17
 1a0:	88 8f       	std	Y+24, r24	; 0x18
 1a2:	99 8f       	std	Y+25, r25	; 0x19
	u8 counter;


PORTB=ORANGE_LED;
 1a4:	88 e3       	ldi	r24, 0x38	; 56
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	22 e0       	ldi	r18, 0x02	; 2
 1aa:	fc 01       	movw	r30, r24
 1ac:	20 83       	st	Z, r18
//		_delay_ms(1000);


		for (counter=MAX_WAIT;counter>MIN;counter--)
 1ae:	85 e0       	ldi	r24, 0x05	; 5
 1b0:	89 83       	std	Y+1, r24	; 0x01
 1b2:	3f c0       	rjmp	.+126    	; 0x232 <Orange+0xaa>
		{
			SEGMENT(PORTA,ZERO);
 1b4:	8a e0       	ldi	r24, 0x0A	; 10
 1b6:	ea e1       	ldi	r30, 0x1A	; 26
 1b8:	f2 e0       	ldi	r31, 0x02	; 2
 1ba:	de 01       	movw	r26, r28
 1bc:	12 96       	adiw	r26, 0x02	; 2
 1be:	01 90       	ld	r0, Z+
 1c0:	0d 92       	st	X+, r0
 1c2:	8a 95       	dec	r24
 1c4:	e1 f7       	brne	.-8      	; 0x1be <Orange+0x36>
 1c6:	8b e3       	ldi	r24, 0x3B	; 59
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	2a 81       	ldd	r18, Y+2	; 0x02
 1cc:	fc 01       	movw	r30, r24
 1ce:	20 83       	st	Z, r18
			SEGMENT(PORTD,(int)(counter%(TEN)));
 1d0:	8a e0       	ldi	r24, 0x0A	; 10
 1d2:	ea e1       	ldi	r30, 0x1A	; 26
 1d4:	f2 e0       	ldi	r31, 0x02	; 2
 1d6:	de 01       	movw	r26, r28
 1d8:	1c 96       	adiw	r26, 0x0c	; 12
 1da:	01 90       	ld	r0, Z+
 1dc:	0d 92       	st	X+, r0
 1de:	8a 95       	dec	r24
 1e0:	e1 f7       	brne	.-8      	; 0x1da <Orange+0x52>
 1e2:	22 e3       	ldi	r18, 0x32	; 50
 1e4:	30 e0       	ldi	r19, 0x00	; 0
 1e6:	99 81       	ldd	r25, Y+1	; 0x01
 1e8:	8d ec       	ldi	r24, 0xCD	; 205
 1ea:	98 9f       	mul	r25, r24
 1ec:	81 2d       	mov	r24, r1
 1ee:	11 24       	eor	r1, r1
 1f0:	86 95       	lsr	r24
 1f2:	86 95       	lsr	r24
 1f4:	86 95       	lsr	r24
 1f6:	88 0f       	add	r24, r24
 1f8:	48 2f       	mov	r20, r24
 1fa:	44 0f       	add	r20, r20
 1fc:	44 0f       	add	r20, r20
 1fe:	84 0f       	add	r24, r20
 200:	f9 2f       	mov	r31, r25
 202:	f8 1b       	sub	r31, r24
 204:	8f 2f       	mov	r24, r31
 206:	88 2f       	mov	r24, r24
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	ae 01       	movw	r20, r28
 20c:	44 5f       	subi	r20, 0xF4	; 244
 20e:	5f 4f       	sbci	r21, 0xFF	; 255
 210:	84 0f       	add	r24, r20
 212:	95 1f       	adc	r25, r21
 214:	fc 01       	movw	r30, r24
 216:	80 81       	ld	r24, Z
 218:	f9 01       	movw	r30, r18
 21a:	80 83       	st	Z, r24
			delay_ms(Delay_Value);
 21c:	8e 89       	ldd	r24, Y+22	; 0x16
 21e:	9f 89       	ldd	r25, Y+23	; 0x17
 220:	a8 8d       	ldd	r26, Y+24	; 0x18
 222:	b9 8d       	ldd	r27, Y+25	; 0x19
 224:	bc 01       	movw	r22, r24
 226:	cd 01       	movw	r24, r26
 228:	0e 94 98 01 	call	0x330	; 0x330 <delay_ms>

PORTB=ORANGE_LED;
//		_delay_ms(1000);


		for (counter=MAX_WAIT;counter>MIN;counter--)
 22c:	89 81       	ldd	r24, Y+1	; 0x01
 22e:	81 50       	subi	r24, 0x01	; 1
 230:	89 83       	std	Y+1, r24	; 0x01
 232:	89 81       	ldd	r24, Y+1	; 0x01
 234:	88 23       	and	r24, r24
 236:	09 f0       	breq	.+2      	; 0x23a <Orange+0xb2>
 238:	bd cf       	rjmp	.-134    	; 0x1b4 <Orange+0x2c>
		{
			SEGMENT(PORTA,ZERO);
			SEGMENT(PORTD,(int)(counter%(TEN)));
			delay_ms(Delay_Value);
		}
}
 23a:	69 96       	adiw	r28, 0x19	; 25
 23c:	0f b6       	in	r0, 0x3f	; 63
 23e:	f8 94       	cli
 240:	de bf       	out	0x3e, r29	; 62
 242:	0f be       	out	0x3f, r0	; 63
 244:	cd bf       	out	0x3d, r28	; 61
 246:	df 91       	pop	r29
 248:	cf 91       	pop	r28
 24a:	08 95       	ret

0000024c <Red>:
 *      Author: Russel
 */


#include "Led_Color.h"
void Red(u32 Delay_Value){
 24c:	cf 93       	push	r28
 24e:	df 93       	push	r29
 250:	cd b7       	in	r28, 0x3d	; 61
 252:	de b7       	in	r29, 0x3e	; 62
 254:	69 97       	sbiw	r28, 0x19	; 25
 256:	0f b6       	in	r0, 0x3f	; 63
 258:	f8 94       	cli
 25a:	de bf       	out	0x3e, r29	; 62
 25c:	0f be       	out	0x3f, r0	; 63
 25e:	cd bf       	out	0x3d, r28	; 61
 260:	6e 8b       	std	Y+22, r22	; 0x16
 262:	7f 8b       	std	Y+23, r23	; 0x17
 264:	88 8f       	std	Y+24, r24	; 0x18
 266:	99 8f       	std	Y+25, r25	; 0x19
u8 counter;

	PORTB=RED_LED;
 268:	88 e3       	ldi	r24, 0x38	; 56
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	24 e0       	ldi	r18, 0x04	; 4
 26e:	fc 01       	movw	r30, r24
 270:	20 83       	st	Z, r18
	for (counter=MAX;counter>MIN;counter--)
 272:	8c e3       	ldi	r24, 0x3C	; 60
 274:	89 83       	std	Y+1, r24	; 0x01
 276:	4f c0       	rjmp	.+158    	; 0x316 <Red+0xca>
	{
			SEGMENT(PORTD,counter%(TEN));
 278:	8a e0       	ldi	r24, 0x0A	; 10
 27a:	e4 e2       	ldi	r30, 0x24	; 36
 27c:	f2 e0       	ldi	r31, 0x02	; 2
 27e:	de 01       	movw	r26, r28
 280:	12 96       	adiw	r26, 0x02	; 2
 282:	01 90       	ld	r0, Z+
 284:	0d 92       	st	X+, r0
 286:	8a 95       	dec	r24
 288:	e1 f7       	brne	.-8      	; 0x282 <Red+0x36>
 28a:	22 e3       	ldi	r18, 0x32	; 50
 28c:	30 e0       	ldi	r19, 0x00	; 0
 28e:	99 81       	ldd	r25, Y+1	; 0x01
 290:	8d ec       	ldi	r24, 0xCD	; 205
 292:	98 9f       	mul	r25, r24
 294:	81 2d       	mov	r24, r1
 296:	11 24       	eor	r1, r1
 298:	86 95       	lsr	r24
 29a:	86 95       	lsr	r24
 29c:	86 95       	lsr	r24
 29e:	88 0f       	add	r24, r24
 2a0:	48 2f       	mov	r20, r24
 2a2:	44 0f       	add	r20, r20
 2a4:	44 0f       	add	r20, r20
 2a6:	84 0f       	add	r24, r20
 2a8:	f9 2f       	mov	r31, r25
 2aa:	f8 1b       	sub	r31, r24
 2ac:	8f 2f       	mov	r24, r31
 2ae:	88 2f       	mov	r24, r24
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	ae 01       	movw	r20, r28
 2b4:	4e 5f       	subi	r20, 0xFE	; 254
 2b6:	5f 4f       	sbci	r21, 0xFF	; 255
 2b8:	84 0f       	add	r24, r20
 2ba:	95 1f       	adc	r25, r21
 2bc:	fc 01       	movw	r30, r24
 2be:	80 81       	ld	r24, Z
 2c0:	f9 01       	movw	r30, r18
 2c2:	80 83       	st	Z, r24
			SEGMENT(PORTA,(counter/(TEN)));
 2c4:	8a e0       	ldi	r24, 0x0A	; 10
 2c6:	e4 e2       	ldi	r30, 0x24	; 36
 2c8:	f2 e0       	ldi	r31, 0x02	; 2
 2ca:	de 01       	movw	r26, r28
 2cc:	1c 96       	adiw	r26, 0x0c	; 12
 2ce:	01 90       	ld	r0, Z+
 2d0:	0d 92       	st	X+, r0
 2d2:	8a 95       	dec	r24
 2d4:	e1 f7       	brne	.-8      	; 0x2ce <Red+0x82>
 2d6:	8b e3       	ldi	r24, 0x3B	; 59
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	39 81       	ldd	r19, Y+1	; 0x01
 2dc:	2d ec       	ldi	r18, 0xCD	; 205
 2de:	32 9f       	mul	r19, r18
 2e0:	21 2d       	mov	r18, r1
 2e2:	11 24       	eor	r1, r1
 2e4:	26 95       	lsr	r18
 2e6:	26 95       	lsr	r18
 2e8:	26 95       	lsr	r18
 2ea:	22 2f       	mov	r18, r18
 2ec:	30 e0       	ldi	r19, 0x00	; 0
 2ee:	ae 01       	movw	r20, r28
 2f0:	44 5f       	subi	r20, 0xF4	; 244
 2f2:	5f 4f       	sbci	r21, 0xFF	; 255
 2f4:	24 0f       	add	r18, r20
 2f6:	35 1f       	adc	r19, r21
 2f8:	f9 01       	movw	r30, r18
 2fa:	20 81       	ld	r18, Z
 2fc:	fc 01       	movw	r30, r24
 2fe:	20 83       	st	Z, r18
			delay_ms(Delay_Value);
 300:	8e 89       	ldd	r24, Y+22	; 0x16
 302:	9f 89       	ldd	r25, Y+23	; 0x17
 304:	a8 8d       	ldd	r26, Y+24	; 0x18
 306:	b9 8d       	ldd	r27, Y+25	; 0x19
 308:	bc 01       	movw	r22, r24
 30a:	cd 01       	movw	r24, r26
 30c:	0e 94 98 01 	call	0x330	; 0x330 <delay_ms>
#include "Led_Color.h"
void Red(u32 Delay_Value){
u8 counter;

	PORTB=RED_LED;
	for (counter=MAX;counter>MIN;counter--)
 310:	89 81       	ldd	r24, Y+1	; 0x01
 312:	81 50       	subi	r24, 0x01	; 1
 314:	89 83       	std	Y+1, r24	; 0x01
 316:	89 81       	ldd	r24, Y+1	; 0x01
 318:	88 23       	and	r24, r24
 31a:	09 f0       	breq	.+2      	; 0x31e <Red+0xd2>
 31c:	ad cf       	rjmp	.-166    	; 0x278 <Red+0x2c>





}
 31e:	69 96       	adiw	r28, 0x19	; 25
 320:	0f b6       	in	r0, 0x3f	; 63
 322:	f8 94       	cli
 324:	de bf       	out	0x3e, r29	; 62
 326:	0f be       	out	0x3f, r0	; 63
 328:	cd bf       	out	0x3d, r28	; 61
 32a:	df 91       	pop	r29
 32c:	cf 91       	pop	r28
 32e:	08 95       	ret

00000330 <delay_ms>:
 *  Created on: Dec 13, 2016
 *      Author: Russel
 */
#include "delay_ms.h"

void delay_ms(u32 delay_Value){
 330:	cf 93       	push	r28
 332:	df 93       	push	r29
 334:	cd b7       	in	r28, 0x3d	; 61
 336:	de b7       	in	r29, 0x3e	; 62
 338:	28 97       	sbiw	r28, 0x08	; 8
 33a:	0f b6       	in	r0, 0x3f	; 63
 33c:	f8 94       	cli
 33e:	de bf       	out	0x3e, r29	; 62
 340:	0f be       	out	0x3f, r0	; 63
 342:	cd bf       	out	0x3d, r28	; 61
 344:	6d 83       	std	Y+5, r22	; 0x05
 346:	7e 83       	std	Y+6, r23	; 0x06
 348:	8f 83       	std	Y+7, r24	; 0x07
 34a:	98 87       	std	Y+8, r25	; 0x08
u32 counter;
while (delay_Value)
 34c:	25 c0       	rjmp	.+74     	; 0x398 <delay_ms+0x68>
{
	//112 is the right one

	for (counter=MIN_FOR_NOP;counter<MAX__FOR_NOP;counter++)
 34e:	19 82       	std	Y+1, r1	; 0x01
 350:	1a 82       	std	Y+2, r1	; 0x02
 352:	1b 82       	std	Y+3, r1	; 0x03
 354:	1c 82       	std	Y+4, r1	; 0x04
 356:	0c c0       	rjmp	.+24     	; 0x370 <delay_ms+0x40>
	{
		asm ("nop");
 358:	00 00       	nop
u32 counter;
while (delay_Value)
{
	//112 is the right one

	for (counter=MIN_FOR_NOP;counter<MAX__FOR_NOP;counter++)
 35a:	89 81       	ldd	r24, Y+1	; 0x01
 35c:	9a 81       	ldd	r25, Y+2	; 0x02
 35e:	ab 81       	ldd	r26, Y+3	; 0x03
 360:	bc 81       	ldd	r27, Y+4	; 0x04
 362:	01 96       	adiw	r24, 0x01	; 1
 364:	a1 1d       	adc	r26, r1
 366:	b1 1d       	adc	r27, r1
 368:	89 83       	std	Y+1, r24	; 0x01
 36a:	9a 83       	std	Y+2, r25	; 0x02
 36c:	ab 83       	std	Y+3, r26	; 0x03
 36e:	bc 83       	std	Y+4, r27	; 0x04
 370:	89 81       	ldd	r24, Y+1	; 0x01
 372:	9a 81       	ldd	r25, Y+2	; 0x02
 374:	ab 81       	ldd	r26, Y+3	; 0x03
 376:	bc 81       	ldd	r27, Y+4	; 0x04
 378:	8f 36       	cpi	r24, 0x6F	; 111
 37a:	91 05       	cpc	r25, r1
 37c:	a1 05       	cpc	r26, r1
 37e:	b1 05       	cpc	r27, r1
 380:	58 f3       	brcs	.-42     	; 0x358 <delay_ms+0x28>
	{
		asm ("nop");

	}

delay_Value--;
 382:	8d 81       	ldd	r24, Y+5	; 0x05
 384:	9e 81       	ldd	r25, Y+6	; 0x06
 386:	af 81       	ldd	r26, Y+7	; 0x07
 388:	b8 85       	ldd	r27, Y+8	; 0x08
 38a:	01 97       	sbiw	r24, 0x01	; 1
 38c:	a1 09       	sbc	r26, r1
 38e:	b1 09       	sbc	r27, r1
 390:	8d 83       	std	Y+5, r24	; 0x05
 392:	9e 83       	std	Y+6, r25	; 0x06
 394:	af 83       	std	Y+7, r26	; 0x07
 396:	b8 87       	std	Y+8, r27	; 0x08
 */
#include "delay_ms.h"

void delay_ms(u32 delay_Value){
u32 counter;
while (delay_Value)
 398:	8d 81       	ldd	r24, Y+5	; 0x05
 39a:	9e 81       	ldd	r25, Y+6	; 0x06
 39c:	af 81       	ldd	r26, Y+7	; 0x07
 39e:	b8 85       	ldd	r27, Y+8	; 0x08
 3a0:	00 97       	sbiw	r24, 0x00	; 0
 3a2:	a1 05       	cpc	r26, r1
 3a4:	b1 05       	cpc	r27, r1
 3a6:	99 f6       	brne	.-90     	; 0x34e <delay_ms+0x1e>
delay_Value--;
}



}
 3a8:	28 96       	adiw	r28, 0x08	; 8
 3aa:	0f b6       	in	r0, 0x3f	; 63
 3ac:	f8 94       	cli
 3ae:	de bf       	out	0x3e, r29	; 62
 3b0:	0f be       	out	0x3f, r0	; 63
 3b2:	cd bf       	out	0x3d, r28	; 61
 3b4:	df 91       	pop	r29
 3b6:	cf 91       	pop	r28
 3b8:	08 95       	ret

000003ba <main>:
#include "Initializing.h"
#include "bitCalc.h"
#include "Seven_Segment_p.h"
#include "led_matrix_names.h"
void main (void)
{
 3ba:	cf 93       	push	r28
 3bc:	df 93       	push	r29
 3be:	cd b7       	in	r28, 0x3d	; 61
 3c0:	de b7       	in	r29, 0x3e	; 62
 3c2:	a8 97       	sbiw	r28, 0x28	; 40
 3c4:	0f b6       	in	r0, 0x3f	; 63
 3c6:	f8 94       	cli
 3c8:	de bf       	out	0x3e, r29	; 62
 3ca:	0f be       	out	0x3f, r0	; 63
 3cc:	cd bf       	out	0x3d, r28	; 61

	u8 Image[][8]= {
 3ce:	28 e2       	ldi	r18, 0x28	; 40
 3d0:	ee e2       	ldi	r30, 0x2E	; 46
 3d2:	f2 e0       	ldi	r31, 0x02	; 2
 3d4:	ce 01       	movw	r24, r28
 3d6:	01 96       	adiw	r24, 0x01	; 1
 3d8:	dc 01       	movw	r26, r24
 3da:	01 90       	ld	r0, Z+
 3dc:	0d 92       	st	X+, r0
 3de:	2a 95       	dec	r18
 3e0:	e1 f7       	brne	.-8      	; 0x3da <main+0x20>
			  0b11000110
			}
	};


DDRA=0xff;
 3e2:	8a e3       	ldi	r24, 0x3A	; 58
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	2f ef       	ldi	r18, 0xFF	; 255
 3e8:	fc 01       	movw	r30, r24
 3ea:	20 83       	st	Z, r18
DDRD=0xff;
 3ec:	81 e3       	ldi	r24, 0x31	; 49
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	2f ef       	ldi	r18, 0xFF	; 255
 3f2:	fc 01       	movw	r30, r24
 3f4:	20 83       	st	Z, r18
	{




}}
 3f6:	ff cf       	rjmp	.-2      	; 0x3f6 <main+0x3c>

000003f8 <_exit>:
 3f8:	f8 94       	cli

000003fa <__stop_program>:
 3fa:	ff cf       	rjmp	.-2      	; 0x3fa <__stop_program>
