/*
 * RTO_prog.c
 *
 *  Created on: Feb 22, 2017
 *      Author: Russel
 */
#include "RTO_interface.h"
#include "RTO_config.h"
#include "RTO_private.h"

static Task RTO_TaskScheduler[RTO_MAXIMUM_TASK_NUMBER];
static RTO_u8Status=RTO_OK;

void RTO_voidInit(void)
{
 RTO_TaskScheduler[RTO_MAXIMUM_TASK_NUMBER]=NULL;
}
u8 RTO_u8CreatTask(Task *Copy_pTaskPointer,u8 Copy_u8TaskPriority)
{
	if (RTO_MAXIMUM_TASK_NUMBER>Copy_u8TaskPriority )
	{
RTO_TaskScheduler[Copy_u8TaskPriority].ptr=Copy_pTaskPointer;
RTO_u8Status=RTO_OK;
	}
	else
	{
		RTO_u8Status=RTO_ERROR;
	}
return RTO_u8Status;

}
u8 RTO_u8DeleteTask(u8 Copy_u8TaskPriority)
{
	if (RTO_MAXIMUM_TASK_NUMBER>Copy_u8TaskPriority )
		{
	RTO_TaskScheduler[Copy_u8TaskPriority].ptr=NULL;
	RTO_u8Status=RTO_OK;

		}
	else
		{
			RTO_u8Status=RTO_ERROR;
		}

	return RTO_u8Status;

}
u8 RTO_u8StartTask(u8 Copy_u8TaskPriority)
{
	if (RTO_MAXIMUM_TASK_NUMBER>Copy_u8TaskPriority )
		{
		RTO_TaskScheduler[Copy_u8TaskPriority].state=Running;
		RTO_u8Status=RTO_OK;

}
	else
		{
			RTO_u8Status=RTO_ERROR;
		}

	return RTO_u8Status;

}
u8 RTO_u8StopTask(u8 Copy_u8TaskPriority)
{
	if (RTO_MAXIMUM_TASK_NUMBER>Copy_u8TaskPriority )
		{

	RTO_TaskScheduler[Copy_u8TaskPriority].state=Paused;
	RTO_u8Status=RTO_OK;
		}
	else
		{
			RTO_u8Status=RTO_ERROR;
		}
	return RTO_u8Status;

}

static u8 RTO_u8Schedular(void)
{
	u8 SCHEDULAR_u8Counter;
		for (SCHEDULAR_u8Counter=SCHEDULAR_INITIAL_TASK;SCHEDULAR_u8Counter<SCHEDULAR_MAXIMUM_TASK;SCHEDULAR_u8Counter++)
		{
			if (swTask[SCHEDULAR_u8Counter].SCHEDULAR_u32FirstDelay== SCHEDULAR_INITIAL_DELAY)
			{
				(swTask[SCHEDULAR_u8Counter].ptr)();
				swTask[SCHEDULAR_u8Counter].SCHEDULAR_u32FirstDelay=swTask[SCHEDULAR_u8Counter].SCHEDULAR_u32Periodicity-SCHEDULAR_PERIODICITY_OFFSET;
			}
			else
			{
				swTask[SCHEDULAR_u8Counter].SCHEDULAR_u32FirstDelay--;


			}

		}

	 return RTO_u8Status;

}
