
Hardware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ca8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00000ca8  00000d3c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800068  00800068  00000d44  2**0
                  ALLOC
  3 .stab         00002d0c  00000000  00000000  00000d44  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000012cf  00000000  00000000  00003a50  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00004d1f  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 8a 00 	jmp	0x114	; 0x114 <__ctors_end>
   4:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
   8:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
   c:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  10:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  14:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  18:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  1c:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  20:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  24:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  28:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  2c:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  30:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  34:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  38:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  3c:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  40:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  44:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  48:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  4c:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  50:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  54:	16 01       	movw	r2, r12
  56:	16 01       	movw	r2, r12
  58:	16 01       	movw	r2, r12
  5a:	16 01       	movw	r2, r12
  5c:	16 01       	movw	r2, r12
  5e:	16 01       	movw	r2, r12
  60:	16 01       	movw	r2, r12
  62:	16 01       	movw	r2, r12
  64:	53 01       	movw	r10, r6
  66:	53 01       	movw	r10, r6
  68:	53 01       	movw	r10, r6
  6a:	53 01       	movw	r10, r6
  6c:	53 01       	movw	r10, r6
  6e:	53 01       	movw	r10, r6
  70:	53 01       	movw	r10, r6
  72:	53 01       	movw	r10, r6
  74:	90 01       	movw	r18, r0
  76:	90 01       	movw	r18, r0
  78:	90 01       	movw	r18, r0
  7a:	90 01       	movw	r18, r0
  7c:	90 01       	movw	r18, r0
  7e:	90 01       	movw	r18, r0
  80:	90 01       	movw	r18, r0
  82:	90 01       	movw	r18, r0
  84:	cd 01       	movw	r24, r26
  86:	cd 01       	movw	r24, r26
  88:	cd 01       	movw	r24, r26
  8a:	cd 01       	movw	r24, r26
  8c:	cd 01       	movw	r24, r26
  8e:	cd 01       	movw	r24, r26
  90:	cd 01       	movw	r24, r26
  92:	cd 01       	movw	r24, r26
  94:	42 02       	muls	r20, r18
  96:	42 02       	muls	r20, r18
  98:	42 02       	muls	r20, r18
  9a:	42 02       	muls	r20, r18
  9c:	42 02       	muls	r20, r18
  9e:	42 02       	muls	r20, r18
  a0:	42 02       	muls	r20, r18
  a2:	42 02       	muls	r20, r18
  a4:	7f 02       	muls	r23, r31
  a6:	7f 02       	muls	r23, r31
  a8:	7f 02       	muls	r23, r31
  aa:	7f 02       	muls	r23, r31
  ac:	7f 02       	muls	r23, r31
  ae:	7f 02       	muls	r23, r31
  b0:	7f 02       	muls	r23, r31
  b2:	7f 02       	muls	r23, r31
  b4:	bc 02       	muls	r27, r28
  b6:	bc 02       	muls	r27, r28
  b8:	bc 02       	muls	r27, r28
  ba:	bc 02       	muls	r27, r28
  bc:	bc 02       	muls	r27, r28
  be:	bc 02       	muls	r27, r28
  c0:	bc 02       	muls	r27, r28
  c2:	bc 02       	muls	r27, r28
  c4:	f9 02       	muls	r31, r25
  c6:	f9 02       	muls	r31, r25
  c8:	f9 02       	muls	r31, r25
  ca:	f9 02       	muls	r31, r25
  cc:	f9 02       	muls	r31, r25
  ce:	f9 02       	muls	r31, r25
  d0:	f9 02       	muls	r31, r25
  d2:	f9 02       	muls	r31, r25
  d4:	6b 03       	fmul	r22, r19
  d6:	6b 03       	fmul	r22, r19
  d8:	6b 03       	fmul	r22, r19
  da:	6b 03       	fmul	r22, r19
  dc:	6b 03       	fmul	r22, r19
  de:	6b 03       	fmul	r22, r19
  e0:	6b 03       	fmul	r22, r19
  e2:	6b 03       	fmul	r22, r19
  e4:	81 03       	fmuls	r16, r17
  e6:	81 03       	fmuls	r16, r17
  e8:	81 03       	fmuls	r16, r17
  ea:	81 03       	fmuls	r16, r17
  ec:	81 03       	fmuls	r16, r17
  ee:	81 03       	fmuls	r16, r17
  f0:	81 03       	fmuls	r16, r17
  f2:	81 03       	fmuls	r16, r17
  f4:	99 03       	fmulsu	r17, r17
  f6:	99 03       	fmulsu	r17, r17
  f8:	99 03       	fmulsu	r17, r17
  fa:	99 03       	fmulsu	r17, r17
  fc:	99 03       	fmulsu	r17, r17
  fe:	99 03       	fmulsu	r17, r17
 100:	99 03       	fmulsu	r17, r17
 102:	99 03       	fmulsu	r17, r17
 104:	b1 03       	fmuls	r19, r17
 106:	b1 03       	fmuls	r19, r17
 108:	b1 03       	fmuls	r19, r17
 10a:	b1 03       	fmuls	r19, r17
 10c:	b1 03       	fmuls	r19, r17
 10e:	b1 03       	fmuls	r19, r17
 110:	b1 03       	fmuls	r19, r17
 112:	b1 03       	fmuls	r19, r17

00000114 <__ctors_end>:
 114:	11 24       	eor	r1, r1
 116:	1f be       	out	0x3f, r1	; 63
 118:	cf e5       	ldi	r28, 0x5F	; 95
 11a:	d8 e0       	ldi	r29, 0x08	; 8
 11c:	de bf       	out	0x3e, r29	; 62
 11e:	cd bf       	out	0x3d, r28	; 61

00000120 <__do_copy_data>:
 120:	10 e0       	ldi	r17, 0x00	; 0
 122:	a0 e6       	ldi	r26, 0x60	; 96
 124:	b0 e0       	ldi	r27, 0x00	; 0
 126:	e8 ea       	ldi	r30, 0xA8	; 168
 128:	fc e0       	ldi	r31, 0x0C	; 12
 12a:	02 c0       	rjmp	.+4      	; 0x130 <__do_copy_data+0x10>
 12c:	05 90       	lpm	r0, Z+
 12e:	0d 92       	st	X+, r0
 130:	a8 36       	cpi	r26, 0x68	; 104
 132:	b1 07       	cpc	r27, r17
 134:	d9 f7       	brne	.-10     	; 0x12c <__do_copy_data+0xc>

00000136 <__do_clear_bss>:
 136:	10 e0       	ldi	r17, 0x00	; 0
 138:	a8 e6       	ldi	r26, 0x68	; 104
 13a:	b0 e0       	ldi	r27, 0x00	; 0
 13c:	01 c0       	rjmp	.+2      	; 0x140 <.do_clear_bss_start>

0000013e <.do_clear_bss_loop>:
 13e:	1d 92       	st	X+, r1

00000140 <.do_clear_bss_start>:
 140:	aa 36       	cpi	r26, 0x6A	; 106
 142:	b1 07       	cpc	r27, r17
 144:	e1 f7       	brne	.-8      	; 0x13e <.do_clear_bss_loop>
 146:	0e 94 1e 06 	call	0xc3c	; 0xc3c <main>
 14a:	0c 94 52 06 	jmp	0xca4	; 0xca4 <_exit>

0000014e <__bad_interrupt>:
 14e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000152 <DIO_voidInitialize>:
 152:	cf 93       	push	r28
 154:	df 93       	push	r29
 156:	cd b7       	in	r28, 0x3d	; 61
 158:	de b7       	in	r29, 0x3e	; 62
 15a:	8a e3       	ldi	r24, 0x3A	; 58
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	2f ef       	ldi	r18, 0xFF	; 255
 160:	fc 01       	movw	r30, r24
 162:	20 83       	st	Z, r18
 164:	87 e3       	ldi	r24, 0x37	; 55
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	fc 01       	movw	r30, r24
 16a:	10 82       	st	Z, r1
 16c:	84 e3       	ldi	r24, 0x34	; 52
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	fc 01       	movw	r30, r24
 172:	10 82       	st	Z, r1
 174:	81 e3       	ldi	r24, 0x31	; 49
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	fc 01       	movw	r30, r24
 17a:	10 82       	st	Z, r1
 17c:	8b e3       	ldi	r24, 0x3B	; 59
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	fc 01       	movw	r30, r24
 182:	10 82       	st	Z, r1
 184:	88 e3       	ldi	r24, 0x38	; 56
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	fc 01       	movw	r30, r24
 18a:	10 82       	st	Z, r1
 18c:	85 e3       	ldi	r24, 0x35	; 53
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	fc 01       	movw	r30, r24
 192:	10 82       	st	Z, r1
 194:	82 e3       	ldi	r24, 0x32	; 50
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	fc 01       	movw	r30, r24
 19a:	10 82       	st	Z, r1
 19c:	df 91       	pop	r29
 19e:	cf 91       	pop	r28
 1a0:	08 95       	ret

000001a2 <DIO_u8SetPortDirection>:
 * 																												*
 * 																												*
 * **************************************************************************************************************/

u8 DIO_u8SetPortDirection(pu8 Copy_pu8DDR , u8 Copy_u8Direction) // HEADER OF THE FUNCTION
{
 1a2:	cf 93       	push	r28
 1a4:	df 93       	push	r29
 1a6:	00 d0       	rcall	.+0      	; 0x1a8 <DIO_u8SetPortDirection+0x6>
 1a8:	1f 92       	push	r1
 1aa:	cd b7       	in	r28, 0x3d	; 61
 1ac:	de b7       	in	r29, 0x3e	; 62
 1ae:	9a 83       	std	Y+2, r25	; 0x02
 1b0:	89 83       	std	Y+1, r24	; 0x01
 1b2:	6b 83       	std	Y+3, r22	; 0x03

	if(Copy_u8Direction == DIO_INPUT) // CHECKING ON THE VALUE OF THE DIRECTION IF IT IS INPUT
 1b4:	8b 81       	ldd	r24, Y+3	; 0x03
 1b6:	88 23       	and	r24, r24
 1b8:	31 f4       	brne	.+12     	; 0x1c6 <DIO_u8SetPortDirection+0x24>
	{
		*(Copy_pu8DDR)= DIO_PORT_INPUT; // ASSIGNING THE INPUT VALUE TO THE REQUIRED DDR
 1ba:	89 81       	ldd	r24, Y+1	; 0x01
 1bc:	9a 81       	ldd	r25, Y+2	; 0x02
 1be:	fc 01       	movw	r30, r24
 1c0:	10 82       	st	Z, r1
		return OK;					// RETURNING TO THE CALLER
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	10 c0       	rjmp	.+32     	; 0x1e6 <DIO_u8SetPortDirection+0x44>
	}
	else if (Copy_u8Direction == DIO_OUTPUT) // CHECKING ON THE VALUE OF THE DIRECTION IF IT IS OUTPUT
 1c6:	8b 81       	ldd	r24, Y+3	; 0x03
 1c8:	81 30       	cpi	r24, 0x01	; 1
 1ca:	39 f4       	brne	.+14     	; 0x1da <DIO_u8SetPortDirection+0x38>
	{
		*(Copy_pu8DDR)=DIO_PORT_OUTPUT; // ASSIGNING THE OUTPUT VALUE TO THE REQUIRED DDR
 1cc:	89 81       	ldd	r24, Y+1	; 0x01
 1ce:	9a 81       	ldd	r25, Y+2	; 0x02
 1d0:	2f ef       	ldi	r18, 0xFF	; 255
 1d2:	fc 01       	movw	r30, r24
 1d4:	20 83       	st	Z, r18
		return OK; // RETURNING TO THE CALLER
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	06 c0       	rjmp	.+12     	; 0x1e6 <DIO_u8SetPortDirection+0x44>
	}
	else // IN CASE OF THE USER ENTERED ANOTHER VALUE RATHER THAN EXPECTED
	{

		*(Copy_pu8DDR)=DIO_PORT_OUTPUT; //THE DEFAULT VALUE
 1da:	89 81       	ldd	r24, Y+1	; 0x01
 1dc:	9a 81       	ldd	r25, Y+2	; 0x02
 1de:	2f ef       	ldi	r18, 0xFF	; 255
 1e0:	fc 01       	movw	r30, r24
 1e2:	20 83       	st	Z, r18
		return ERROR; // RETURNING THE ERROR INDICATOR
 1e4:	80 e0       	ldi	r24, 0x00	; 0
	}
	return ERROR; // RETURNING THE ERROR INDICATOR INCASE OF ANY UNEXPECTED EVENT

}
 1e6:	0f 90       	pop	r0
 1e8:	0f 90       	pop	r0
 1ea:	0f 90       	pop	r0
 1ec:	df 91       	pop	r29
 1ee:	cf 91       	pop	r28
 1f0:	08 95       	ret

000001f2 <DIO_u8SetPinDirection>:
 * 																												*
 * 																												*
 * **************************************************************************************************************/

u8 DIO_u8SetPinDirection(u8 Copy_u8PinNumber , u8 Copy_u8Direction) // HEADER OF THE FUNCTION
{
 1f2:	cf 93       	push	r28
 1f4:	df 93       	push	r29
 1f6:	00 d0       	rcall	.+0      	; 0x1f8 <DIO_u8SetPinDirection+0x6>
 1f8:	cd b7       	in	r28, 0x3d	; 61
 1fa:	de b7       	in	r29, 0x3e	; 62
 1fc:	89 83       	std	Y+1, r24	; 0x01
 1fe:	6a 83       	std	Y+2, r22	; 0x02

	switch (Copy_u8PinNumber)
 200:	89 81       	ldd	r24, Y+1	; 0x01
 202:	88 2f       	mov	r24, r24
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	aa 27       	eor	r26, r26
 208:	97 fd       	sbrc	r25, 7
 20a:	a0 95       	com	r26
 20c:	ba 2f       	mov	r27, r26
 20e:	40 e0       	ldi	r20, 0x00	; 0
 210:	50 e0       	ldi	r21, 0x00	; 0
 212:	2f e1       	ldi	r18, 0x1F	; 31
 214:	30 e0       	ldi	r19, 0x00	; 0
 216:	84 1b       	sub	r24, r20
 218:	95 0b       	sbc	r25, r21
 21a:	28 17       	cp	r18, r24
 21c:	39 07       	cpc	r19, r25
 21e:	08 f4       	brcc	.+2      	; 0x222 <DIO_u8SetPinDirection+0x30>
 220:	f9 c0       	rjmp	.+498    	; 0x414 <DIO_u8SetPinDirection+0x222>
 222:	86 5d       	subi	r24, 0xD6	; 214
 224:	9f 4f       	sbci	r25, 0xFF	; 255
 226:	fc 01       	movw	r30, r24
 228:	0c 94 4c 06 	jmp	0xc98	; 0xc98 <__tablejump2__>
	case PIN_3:
	case PIN_4:
	case PIN_5:
	case PIN_6:
	case PIN_7:
		if (Copy_u8Direction == DIO_INPUT) //CHECKING IF THE THE DIRECTION IS INPUT AND THE REQUIRED PIN BELONGS TO DDRA AND ASSIGN
 22c:	8a 81       	ldd	r24, Y+2	; 0x02
 22e:	88 23       	and	r24, r24
 230:	d9 f4       	brne	.+54     	; 0x268 <DIO_u8SetPinDirection+0x76>
		{                                  //THE CORESSPONDING VALUE
			clrBit(DDRA,(Copy_u8PinNumber%8));
 232:	8a e3       	ldi	r24, 0x3A	; 58
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	2a e3       	ldi	r18, 0x3A	; 58
 238:	30 e0       	ldi	r19, 0x00	; 0
 23a:	f9 01       	movw	r30, r18
 23c:	20 81       	ld	r18, Z
 23e:	62 2f       	mov	r22, r18
 240:	29 81       	ldd	r18, Y+1	; 0x01
 242:	22 2f       	mov	r18, r18
 244:	30 e0       	ldi	r19, 0x00	; 0
 246:	a9 01       	movw	r20, r18
 248:	47 70       	andi	r20, 0x07	; 7
 24a:	55 27       	eor	r21, r21
 24c:	21 e0       	ldi	r18, 0x01	; 1
 24e:	30 e0       	ldi	r19, 0x00	; 0
 250:	04 2e       	mov	r0, r20
 252:	02 c0       	rjmp	.+4      	; 0x258 <DIO_u8SetPinDirection+0x66>
 254:	22 0f       	add	r18, r18
 256:	33 1f       	adc	r19, r19
 258:	0a 94       	dec	r0
 25a:	e2 f7       	brpl	.-8      	; 0x254 <DIO_u8SetPinDirection+0x62>
 25c:	20 95       	com	r18
 25e:	26 23       	and	r18, r22
 260:	fc 01       	movw	r30, r24
 262:	20 83       	st	Z, r18
			return OK;// only once
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	d7 c0       	rjmp	.+430    	; 0x416 <DIO_u8SetPinDirection+0x224>
		}
		else if (Copy_u8Direction == DIO_OUTPUT)//CHECKING IF THE THE DIRECTION IS OUTPUT AND THE REQUIRED PIN BELONGS TO DDRA AND ASSIGN
 268:	8a 81       	ldd	r24, Y+2	; 0x02
 26a:	81 30       	cpi	r24, 0x01	; 1
 26c:	d1 f4       	brne	.+52     	; 0x2a2 <DIO_u8SetPinDirection+0xb0>
		{                                       //THE CORESSPONDING VALUE
			setBit(DDRA,(Copy_u8PinNumber%8));
 26e:	8a e3       	ldi	r24, 0x3A	; 58
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	2a e3       	ldi	r18, 0x3A	; 58
 274:	30 e0       	ldi	r19, 0x00	; 0
 276:	f9 01       	movw	r30, r18
 278:	20 81       	ld	r18, Z
 27a:	62 2f       	mov	r22, r18
 27c:	29 81       	ldd	r18, Y+1	; 0x01
 27e:	22 2f       	mov	r18, r18
 280:	30 e0       	ldi	r19, 0x00	; 0
 282:	a9 01       	movw	r20, r18
 284:	47 70       	andi	r20, 0x07	; 7
 286:	55 27       	eor	r21, r21
 288:	21 e0       	ldi	r18, 0x01	; 1
 28a:	30 e0       	ldi	r19, 0x00	; 0
 28c:	04 2e       	mov	r0, r20
 28e:	02 c0       	rjmp	.+4      	; 0x294 <DIO_u8SetPinDirection+0xa2>
 290:	22 0f       	add	r18, r18
 292:	33 1f       	adc	r19, r19
 294:	0a 94       	dec	r0
 296:	e2 f7       	brpl	.-8      	; 0x290 <DIO_u8SetPinDirection+0x9e>
 298:	26 2b       	or	r18, r22
 29a:	fc 01       	movw	r30, r24
 29c:	20 83       	st	Z, r18
			return OK;
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	ba c0       	rjmp	.+372    	; 0x416 <DIO_u8SetPinDirection+0x224>
		}
		else  //IF THE DIRECTIONE NEITHER INPUT NOR OUTPUT RETURNING AN ERROR SIGNAL
			return ERROR;
 2a2:	80 e0       	ldi	r24, 0x00	; 0
 2a4:	b8 c0       	rjmp	.+368    	; 0x416 <DIO_u8SetPinDirection+0x224>
	case PIN_11:
	case PIN_12:
	case PIN_13:
    case PIN_14:
    case PIN_15:
    	if (Copy_u8Direction == DIO_INPUT)//CHECKING IF THE THE DIRECTION IS INPUT AND THE REQUIRED PIN BELONGS TO DDRB AND ASSIGN
 2a6:	8a 81       	ldd	r24, Y+2	; 0x02
 2a8:	88 23       	and	r24, r24
 2aa:	d9 f4       	brne	.+54     	; 0x2e2 <DIO_u8SetPinDirection+0xf0>
    			{							//THE CORESSPONDING VALUE
    				clrBit(DDRB,(Copy_u8PinNumber%8));
 2ac:	87 e3       	ldi	r24, 0x37	; 55
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	27 e3       	ldi	r18, 0x37	; 55
 2b2:	30 e0       	ldi	r19, 0x00	; 0
 2b4:	f9 01       	movw	r30, r18
 2b6:	20 81       	ld	r18, Z
 2b8:	62 2f       	mov	r22, r18
 2ba:	29 81       	ldd	r18, Y+1	; 0x01
 2bc:	22 2f       	mov	r18, r18
 2be:	30 e0       	ldi	r19, 0x00	; 0
 2c0:	a9 01       	movw	r20, r18
 2c2:	47 70       	andi	r20, 0x07	; 7
 2c4:	55 27       	eor	r21, r21
 2c6:	21 e0       	ldi	r18, 0x01	; 1
 2c8:	30 e0       	ldi	r19, 0x00	; 0
 2ca:	04 2e       	mov	r0, r20
 2cc:	02 c0       	rjmp	.+4      	; 0x2d2 <DIO_u8SetPinDirection+0xe0>
 2ce:	22 0f       	add	r18, r18
 2d0:	33 1f       	adc	r19, r19
 2d2:	0a 94       	dec	r0
 2d4:	e2 f7       	brpl	.-8      	; 0x2ce <DIO_u8SetPinDirection+0xdc>
 2d6:	20 95       	com	r18
 2d8:	26 23       	and	r18, r22
 2da:	fc 01       	movw	r30, r24
 2dc:	20 83       	st	Z, r18
    				return OK;
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	9a c0       	rjmp	.+308    	; 0x416 <DIO_u8SetPinDirection+0x224>
    			}
    			else if (Copy_u8Direction == DIO_OUTPUT)//CHECKING IF THE THE DIRECTION IS OUTPUT AND THE REQUIRED PIN BELONGS TO DDRB AND ASSIGN
 2e2:	8a 81       	ldd	r24, Y+2	; 0x02
 2e4:	81 30       	cpi	r24, 0x01	; 1
 2e6:	d1 f4       	brne	.+52     	; 0x31c <DIO_u8SetPinDirection+0x12a>
    			{							//THE CORESSPONDING VALUE
    				setBit(DDRB,(Copy_u8PinNumber%8));
 2e8:	87 e3       	ldi	r24, 0x37	; 55
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	27 e3       	ldi	r18, 0x37	; 55
 2ee:	30 e0       	ldi	r19, 0x00	; 0
 2f0:	f9 01       	movw	r30, r18
 2f2:	20 81       	ld	r18, Z
 2f4:	62 2f       	mov	r22, r18
 2f6:	29 81       	ldd	r18, Y+1	; 0x01
 2f8:	22 2f       	mov	r18, r18
 2fa:	30 e0       	ldi	r19, 0x00	; 0
 2fc:	a9 01       	movw	r20, r18
 2fe:	47 70       	andi	r20, 0x07	; 7
 300:	55 27       	eor	r21, r21
 302:	21 e0       	ldi	r18, 0x01	; 1
 304:	30 e0       	ldi	r19, 0x00	; 0
 306:	04 2e       	mov	r0, r20
 308:	02 c0       	rjmp	.+4      	; 0x30e <DIO_u8SetPinDirection+0x11c>
 30a:	22 0f       	add	r18, r18
 30c:	33 1f       	adc	r19, r19
 30e:	0a 94       	dec	r0
 310:	e2 f7       	brpl	.-8      	; 0x30a <DIO_u8SetPinDirection+0x118>
 312:	26 2b       	or	r18, r22
 314:	fc 01       	movw	r30, r24
 316:	20 83       	st	Z, r18
    				return OK;
 318:	81 e0       	ldi	r24, 0x01	; 1
 31a:	7d c0       	rjmp	.+250    	; 0x416 <DIO_u8SetPinDirection+0x224>
    			}
    			else //IF THE DIRECTIONE NEITHER INPUT NOR OUTPUT RETURNING AN ERROR SIGNAL
    				return ERROR;
 31c:	80 e0       	ldi	r24, 0x00	; 0
 31e:	7b c0       	rjmp	.+246    	; 0x416 <DIO_u8SetPinDirection+0x224>
    case PIN_19:
   	case PIN_20 :
   	case PIN_21:
    case PIN_22:
   	case PIN_23:
   		if (Copy_u8Direction == DIO_INPUT)//CHECKING IF THE THE DIRECTION IS INPUT AND THE REQUIRED PIN BELONGS TO DDRC AND ASSIGN
 320:	8a 81       	ldd	r24, Y+2	; 0x02
 322:	88 23       	and	r24, r24
 324:	d9 f4       	brne	.+54     	; 0x35c <DIO_u8SetPinDirection+0x16a>
      			{									//THE CORESSPONDING VALUE
       				clrBit(DDRC,(Copy_u8PinNumber%8));
 326:	84 e3       	ldi	r24, 0x34	; 52
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	24 e3       	ldi	r18, 0x34	; 52
 32c:	30 e0       	ldi	r19, 0x00	; 0
 32e:	f9 01       	movw	r30, r18
 330:	20 81       	ld	r18, Z
 332:	62 2f       	mov	r22, r18
 334:	29 81       	ldd	r18, Y+1	; 0x01
 336:	22 2f       	mov	r18, r18
 338:	30 e0       	ldi	r19, 0x00	; 0
 33a:	a9 01       	movw	r20, r18
 33c:	47 70       	andi	r20, 0x07	; 7
 33e:	55 27       	eor	r21, r21
 340:	21 e0       	ldi	r18, 0x01	; 1
 342:	30 e0       	ldi	r19, 0x00	; 0
 344:	04 2e       	mov	r0, r20
 346:	02 c0       	rjmp	.+4      	; 0x34c <DIO_u8SetPinDirection+0x15a>
 348:	22 0f       	add	r18, r18
 34a:	33 1f       	adc	r19, r19
 34c:	0a 94       	dec	r0
 34e:	e2 f7       	brpl	.-8      	; 0x348 <DIO_u8SetPinDirection+0x156>
 350:	20 95       	com	r18
 352:	26 23       	and	r18, r22
 354:	fc 01       	movw	r30, r24
 356:	20 83       	st	Z, r18
       				return OK;
 358:	81 e0       	ldi	r24, 0x01	; 1
 35a:	5d c0       	rjmp	.+186    	; 0x416 <DIO_u8SetPinDirection+0x224>
       			}
       			else if (Copy_u8Direction == DIO_OUTPUT)//CHECKING IF THE THE DIRECTION IS OUTPUT AND THE REQUIRED PIN BELONGS TO DDRC AND ASSIGN
 35c:	8a 81       	ldd	r24, Y+2	; 0x02
 35e:	81 30       	cpi	r24, 0x01	; 1
 360:	d1 f4       	brne	.+52     	; 0x396 <DIO_u8SetPinDirection+0x1a4>
   	  			{									//THE CORESSPONDING VALUE
   	   				setBit(DDRC,(Copy_u8PinNumber%8));
 362:	84 e3       	ldi	r24, 0x34	; 52
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	24 e3       	ldi	r18, 0x34	; 52
 368:	30 e0       	ldi	r19, 0x00	; 0
 36a:	f9 01       	movw	r30, r18
 36c:	20 81       	ld	r18, Z
 36e:	62 2f       	mov	r22, r18
 370:	29 81       	ldd	r18, Y+1	; 0x01
 372:	22 2f       	mov	r18, r18
 374:	30 e0       	ldi	r19, 0x00	; 0
 376:	a9 01       	movw	r20, r18
 378:	47 70       	andi	r20, 0x07	; 7
 37a:	55 27       	eor	r21, r21
 37c:	21 e0       	ldi	r18, 0x01	; 1
 37e:	30 e0       	ldi	r19, 0x00	; 0
 380:	04 2e       	mov	r0, r20
 382:	02 c0       	rjmp	.+4      	; 0x388 <DIO_u8SetPinDirection+0x196>
 384:	22 0f       	add	r18, r18
 386:	33 1f       	adc	r19, r19
 388:	0a 94       	dec	r0
 38a:	e2 f7       	brpl	.-8      	; 0x384 <DIO_u8SetPinDirection+0x192>
 38c:	26 2b       	or	r18, r22
 38e:	fc 01       	movw	r30, r24
 390:	20 83       	st	Z, r18
       				return OK;
 392:	81 e0       	ldi	r24, 0x01	; 1
 394:	40 c0       	rjmp	.+128    	; 0x416 <DIO_u8SetPinDirection+0x224>
       			}
   	   			else //IF THE DIRECTIONE NEITHER INPUT NOR OUTPUT RETURNING AN ERROR SIGNAL
   	   				return ERROR;
 396:	80 e0       	ldi	r24, 0x00	; 0
 398:	3e c0       	rjmp	.+124    	; 0x416 <DIO_u8SetPinDirection+0x224>
   	case PIN_27:
   	case PIN_28:
   	case PIN_29:
   	case PIN_30:
   	case PIN_31:
   	   if (Copy_u8Direction == DIO_INPUT)//CHECKING IF THE THE DIRECTION IS INPUT AND THE REQUIRED PIN BELONGS TO DDRD AND ASSIGN
 39a:	8a 81       	ldd	r24, Y+2	; 0x02
 39c:	88 23       	and	r24, r24
 39e:	d9 f4       	brne	.+54     	; 0x3d6 <DIO_u8SetPinDirection+0x1e4>
   	  			{								//THE CORESSPONDING VALUE
       				clrBit(DDRD,(Copy_u8PinNumber%8));
 3a0:	81 e3       	ldi	r24, 0x31	; 49
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	21 e3       	ldi	r18, 0x31	; 49
 3a6:	30 e0       	ldi	r19, 0x00	; 0
 3a8:	f9 01       	movw	r30, r18
 3aa:	20 81       	ld	r18, Z
 3ac:	62 2f       	mov	r22, r18
 3ae:	29 81       	ldd	r18, Y+1	; 0x01
 3b0:	22 2f       	mov	r18, r18
 3b2:	30 e0       	ldi	r19, 0x00	; 0
 3b4:	a9 01       	movw	r20, r18
 3b6:	47 70       	andi	r20, 0x07	; 7
 3b8:	55 27       	eor	r21, r21
 3ba:	21 e0       	ldi	r18, 0x01	; 1
 3bc:	30 e0       	ldi	r19, 0x00	; 0
 3be:	04 2e       	mov	r0, r20
 3c0:	02 c0       	rjmp	.+4      	; 0x3c6 <DIO_u8SetPinDirection+0x1d4>
 3c2:	22 0f       	add	r18, r18
 3c4:	33 1f       	adc	r19, r19
 3c6:	0a 94       	dec	r0
 3c8:	e2 f7       	brpl	.-8      	; 0x3c2 <DIO_u8SetPinDirection+0x1d0>
 3ca:	20 95       	com	r18
 3cc:	26 23       	and	r18, r22
 3ce:	fc 01       	movw	r30, r24
 3d0:	20 83       	st	Z, r18
       				return OK;
 3d2:	81 e0       	ldi	r24, 0x01	; 1
 3d4:	20 c0       	rjmp	.+64     	; 0x416 <DIO_u8SetPinDirection+0x224>
   	       			}
   	       			else if (Copy_u8Direction == DIO_OUTPUT)//CHECKING IF THE THE DIRECTION IS OUTPUT AND THE REQUIRED PIN BELONGS TO DDRA AND ASSIGN
 3d6:	8a 81       	ldd	r24, Y+2	; 0x02
 3d8:	81 30       	cpi	r24, 0x01	; 1
 3da:	d1 f4       	brne	.+52     	; 0x410 <DIO_u8SetPinDirection+0x21e>
   	   	  			{							//THE CORESSPONDING VALUE
   	   	   			setBit(DDRD,(Copy_u8PinNumber%8));
 3dc:	81 e3       	ldi	r24, 0x31	; 49
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	21 e3       	ldi	r18, 0x31	; 49
 3e2:	30 e0       	ldi	r19, 0x00	; 0
 3e4:	f9 01       	movw	r30, r18
 3e6:	20 81       	ld	r18, Z
 3e8:	62 2f       	mov	r22, r18
 3ea:	29 81       	ldd	r18, Y+1	; 0x01
 3ec:	22 2f       	mov	r18, r18
 3ee:	30 e0       	ldi	r19, 0x00	; 0
 3f0:	a9 01       	movw	r20, r18
 3f2:	47 70       	andi	r20, 0x07	; 7
 3f4:	55 27       	eor	r21, r21
 3f6:	21 e0       	ldi	r18, 0x01	; 1
 3f8:	30 e0       	ldi	r19, 0x00	; 0
 3fa:	04 2e       	mov	r0, r20
 3fc:	02 c0       	rjmp	.+4      	; 0x402 <DIO_u8SetPinDirection+0x210>
 3fe:	22 0f       	add	r18, r18
 400:	33 1f       	adc	r19, r19
 402:	0a 94       	dec	r0
 404:	e2 f7       	brpl	.-8      	; 0x3fe <DIO_u8SetPinDirection+0x20c>
 406:	26 2b       	or	r18, r22
 408:	fc 01       	movw	r30, r24
 40a:	20 83       	st	Z, r18
   	       			return OK;
 40c:	81 e0       	ldi	r24, 0x01	; 1
 40e:	03 c0       	rjmp	.+6      	; 0x416 <DIO_u8SetPinDirection+0x224>
   	       			}
   	   	   			else //IF THE DIRECTIONE NEITHER INPUT NOR OUTPUT RETURNING AN ERROR SIGNAL
   	   	   				return ERROR;
 410:	80 e0       	ldi	r24, 0x00	; 0
 412:	01 c0       	rjmp	.+2      	; 0x416 <DIO_u8SetPinDirection+0x224>

   		break;

   	default : return ERROR; // IF THE PIN NUMBER WAS INVALID OR OUT OF RANGE
 414:	80 e0       	ldi	r24, 0x00	; 0
	}
return ERROR;
}
 416:	0f 90       	pop	r0
 418:	0f 90       	pop	r0
 41a:	df 91       	pop	r29
 41c:	cf 91       	pop	r28
 41e:	08 95       	ret

00000420 <DIO_u8SetPortValue>:
 * 																												*
 * 																												*
 * **************************************************************************************************************/

u8 DIO_u8SetPortValue(pu8 Copy_pu8PortName , u8 Copy_u8PortValue)// HEADER OF THE FUNCTION
{
 420:	cf 93       	push	r28
 422:	df 93       	push	r29
 424:	00 d0       	rcall	.+0      	; 0x426 <DIO_u8SetPortValue+0x6>
 426:	1f 92       	push	r1
 428:	cd b7       	in	r28, 0x3d	; 61
 42a:	de b7       	in	r29, 0x3e	; 62
 42c:	9a 83       	std	Y+2, r25	; 0x02
 42e:	89 83       	std	Y+1, r24	; 0x01
 430:	6b 83       	std	Y+3, r22	; 0x03

	while (Copy_u8PortValue <= DIO_PORT_MAX) // TO MAKE SURE THAT THE ENTERED VALUE IS LEGAL
	{

		(*(Copy_pu8PortName))= Copy_u8PortValue;  // ASSIGNING THE VALUE TO THE REQUIRED PORT
 432:	89 81       	ldd	r24, Y+1	; 0x01
 434:	9a 81       	ldd	r25, Y+2	; 0x02
 436:	2b 81       	ldd	r18, Y+3	; 0x03
 438:	fc 01       	movw	r30, r24
 43a:	20 83       	st	Z, r18
		return OK;
 43c:	81 e0       	ldi	r24, 0x01	; 1
	}

	return ERROR;  // RETURNING THE ERROR INDICATOR INCASE OF ANY UNEXPECTED EVENT
}
 43e:	0f 90       	pop	r0
 440:	0f 90       	pop	r0
 442:	0f 90       	pop	r0
 444:	df 91       	pop	r29
 446:	cf 91       	pop	r28
 448:	08 95       	ret

0000044a <DIO_u8SetPinValue>:
 * **************************************************************************************************************/



u8 DIO_u8SetPinValue(u8 Copy_u8PinNumber,u8 Copy_u8PinValue)// HEADER OF THE FUNCTION
{
 44a:	cf 93       	push	r28
 44c:	df 93       	push	r29
 44e:	00 d0       	rcall	.+0      	; 0x450 <DIO_u8SetPinValue+0x6>
 450:	cd b7       	in	r28, 0x3d	; 61
 452:	de b7       	in	r29, 0x3e	; 62
 454:	89 83       	std	Y+1, r24	; 0x01
 456:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8PinNumber)
 458:	89 81       	ldd	r24, Y+1	; 0x01
 45a:	88 2f       	mov	r24, r24
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	aa 27       	eor	r26, r26
 460:	97 fd       	sbrc	r25, 7
 462:	a0 95       	com	r26
 464:	ba 2f       	mov	r27, r26
 466:	40 e0       	ldi	r20, 0x00	; 0
 468:	50 e0       	ldi	r21, 0x00	; 0
 46a:	2f e1       	ldi	r18, 0x1F	; 31
 46c:	30 e0       	ldi	r19, 0x00	; 0
 46e:	84 1b       	sub	r24, r20
 470:	95 0b       	sbc	r25, r21
 472:	28 17       	cp	r18, r24
 474:	39 07       	cpc	r19, r25
 476:	08 f4       	brcc	.+2      	; 0x47a <DIO_u8SetPinValue+0x30>
 478:	f9 c0       	rjmp	.+498    	; 0x66c <DIO_u8SetPinValue+0x222>
 47a:	86 5b       	subi	r24, 0xB6	; 182
 47c:	9f 4f       	sbci	r25, 0xFF	; 255
 47e:	fc 01       	movw	r30, r24
 480:	0c 94 4c 06 	jmp	0xc98	; 0xc98 <__tablejump2__>
	case 3:
	case 4:
	case 5:
	case 6:
	case 7:
		if (Copy_u8PinValue == DIO_LOW) //CHECKING IF THE THE VALUE OF THE  REQUIRED PIN WHICH BELONGS TO DDRA IS LOW AND ASSIGN
 484:	8a 81       	ldd	r24, Y+2	; 0x02
 486:	88 23       	and	r24, r24
 488:	d9 f4       	brne	.+54     	; 0x4c0 <DIO_u8SetPinValue+0x76>
 			{								//THE CORESSPONDING VALUE

			clrBit(PORTA,(Copy_u8PinNumber%8));
 48a:	8b e3       	ldi	r24, 0x3B	; 59
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	2b e3       	ldi	r18, 0x3B	; 59
 490:	30 e0       	ldi	r19, 0x00	; 0
 492:	f9 01       	movw	r30, r18
 494:	20 81       	ld	r18, Z
 496:	62 2f       	mov	r22, r18
 498:	29 81       	ldd	r18, Y+1	; 0x01
 49a:	22 2f       	mov	r18, r18
 49c:	30 e0       	ldi	r19, 0x00	; 0
 49e:	a9 01       	movw	r20, r18
 4a0:	47 70       	andi	r20, 0x07	; 7
 4a2:	55 27       	eor	r21, r21
 4a4:	21 e0       	ldi	r18, 0x01	; 1
 4a6:	30 e0       	ldi	r19, 0x00	; 0
 4a8:	04 2e       	mov	r0, r20
 4aa:	02 c0       	rjmp	.+4      	; 0x4b0 <DIO_u8SetPinValue+0x66>
 4ac:	22 0f       	add	r18, r18
 4ae:	33 1f       	adc	r19, r19
 4b0:	0a 94       	dec	r0
 4b2:	e2 f7       	brpl	.-8      	; 0x4ac <DIO_u8SetPinValue+0x62>
 4b4:	20 95       	com	r18
 4b6:	26 23       	and	r18, r22
 4b8:	fc 01       	movw	r30, r24
 4ba:	20 83       	st	Z, r18
			return OK;
 4bc:	81 e0       	ldi	r24, 0x01	; 1
 4be:	d7 c0       	rjmp	.+430    	; 0x66e <DIO_u8SetPinValue+0x224>
		}
		else if (Copy_u8PinValue == DIO_HIGH) //CHECKING IF THE THE VALUE OF THE  REQUIRED PIN WHICH BELONGS TO DDRA IS HIGH AND ASSIGN
 4c0:	8a 81       	ldd	r24, Y+2	; 0x02
 4c2:	81 30       	cpi	r24, 0x01	; 1
 4c4:	d1 f4       	brne	.+52     	; 0x4fa <DIO_u8SetPinValue+0xb0>
		{									//THE CORESSPONDING VALUE
			setBit(PORTA,(Copy_u8PinNumber%8));
 4c6:	8b e3       	ldi	r24, 0x3B	; 59
 4c8:	90 e0       	ldi	r25, 0x00	; 0
 4ca:	2b e3       	ldi	r18, 0x3B	; 59
 4cc:	30 e0       	ldi	r19, 0x00	; 0
 4ce:	f9 01       	movw	r30, r18
 4d0:	20 81       	ld	r18, Z
 4d2:	62 2f       	mov	r22, r18
 4d4:	29 81       	ldd	r18, Y+1	; 0x01
 4d6:	22 2f       	mov	r18, r18
 4d8:	30 e0       	ldi	r19, 0x00	; 0
 4da:	a9 01       	movw	r20, r18
 4dc:	47 70       	andi	r20, 0x07	; 7
 4de:	55 27       	eor	r21, r21
 4e0:	21 e0       	ldi	r18, 0x01	; 1
 4e2:	30 e0       	ldi	r19, 0x00	; 0
 4e4:	04 2e       	mov	r0, r20
 4e6:	02 c0       	rjmp	.+4      	; 0x4ec <DIO_u8SetPinValue+0xa2>
 4e8:	22 0f       	add	r18, r18
 4ea:	33 1f       	adc	r19, r19
 4ec:	0a 94       	dec	r0
 4ee:	e2 f7       	brpl	.-8      	; 0x4e8 <DIO_u8SetPinValue+0x9e>
 4f0:	26 2b       	or	r18, r22
 4f2:	fc 01       	movw	r30, r24
 4f4:	20 83       	st	Z, r18
			return OK;
 4f6:	81 e0       	ldi	r24, 0x01	; 1
 4f8:	ba c0       	rjmp	.+372    	; 0x66e <DIO_u8SetPinValue+0x224>
		}
		else //IF THE VALUE NEITHER HIGH NOR LOW  RETURNING AN ERROR SIGNAL
			return ERROR;
 4fa:	80 e0       	ldi	r24, 0x00	; 0
 4fc:	b8 c0       	rjmp	.+368    	; 0x66e <DIO_u8SetPinValue+0x224>
	case 11:
	case 12:
	case 13:
    case 14:
	case 15:
			if (Copy_u8PinValue == DIO_LOW) //CHECKING IF THE THE VALUE OF THE  REQUIRED PIN WHICH BELONGS TO DDRB IS LOW AND ASSIGN
 4fe:	8a 81       	ldd	r24, Y+2	; 0x02
 500:	88 23       	and	r24, r24
 502:	d9 f4       	brne	.+54     	; 0x53a <DIO_u8SetPinValue+0xf0>
			{								//THE CORESSPONDING VALUE
				clrBit(PORTB,(Copy_u8PinNumber%8));
 504:	88 e3       	ldi	r24, 0x38	; 56
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	28 e3       	ldi	r18, 0x38	; 56
 50a:	30 e0       	ldi	r19, 0x00	; 0
 50c:	f9 01       	movw	r30, r18
 50e:	20 81       	ld	r18, Z
 510:	62 2f       	mov	r22, r18
 512:	29 81       	ldd	r18, Y+1	; 0x01
 514:	22 2f       	mov	r18, r18
 516:	30 e0       	ldi	r19, 0x00	; 0
 518:	a9 01       	movw	r20, r18
 51a:	47 70       	andi	r20, 0x07	; 7
 51c:	55 27       	eor	r21, r21
 51e:	21 e0       	ldi	r18, 0x01	; 1
 520:	30 e0       	ldi	r19, 0x00	; 0
 522:	04 2e       	mov	r0, r20
 524:	02 c0       	rjmp	.+4      	; 0x52a <DIO_u8SetPinValue+0xe0>
 526:	22 0f       	add	r18, r18
 528:	33 1f       	adc	r19, r19
 52a:	0a 94       	dec	r0
 52c:	e2 f7       	brpl	.-8      	; 0x526 <DIO_u8SetPinValue+0xdc>
 52e:	20 95       	com	r18
 530:	26 23       	and	r18, r22
 532:	fc 01       	movw	r30, r24
 534:	20 83       	st	Z, r18
				return OK;
 536:	81 e0       	ldi	r24, 0x01	; 1
 538:	9a c0       	rjmp	.+308    	; 0x66e <DIO_u8SetPinValue+0x224>
			}
			else if (Copy_u8PinValue == DIO_HIGH) //CHECKING IF THE THE VALUE OF THE  REQUIRED PIN WHICH BELONGS TO DDRB IS HIGH AND ASSIGN
 53a:	8a 81       	ldd	r24, Y+2	; 0x02
 53c:	81 30       	cpi	r24, 0x01	; 1
 53e:	d1 f4       	brne	.+52     	; 0x574 <DIO_u8SetPinValue+0x12a>
			{									 //THE CORESSPONDING VALUE
				setBit(PORTB,(Copy_u8PinNumber%8));
 540:	88 e3       	ldi	r24, 0x38	; 56
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	28 e3       	ldi	r18, 0x38	; 56
 546:	30 e0       	ldi	r19, 0x00	; 0
 548:	f9 01       	movw	r30, r18
 54a:	20 81       	ld	r18, Z
 54c:	62 2f       	mov	r22, r18
 54e:	29 81       	ldd	r18, Y+1	; 0x01
 550:	22 2f       	mov	r18, r18
 552:	30 e0       	ldi	r19, 0x00	; 0
 554:	a9 01       	movw	r20, r18
 556:	47 70       	andi	r20, 0x07	; 7
 558:	55 27       	eor	r21, r21
 55a:	21 e0       	ldi	r18, 0x01	; 1
 55c:	30 e0       	ldi	r19, 0x00	; 0
 55e:	04 2e       	mov	r0, r20
 560:	02 c0       	rjmp	.+4      	; 0x566 <DIO_u8SetPinValue+0x11c>
 562:	22 0f       	add	r18, r18
 564:	33 1f       	adc	r19, r19
 566:	0a 94       	dec	r0
 568:	e2 f7       	brpl	.-8      	; 0x562 <DIO_u8SetPinValue+0x118>
 56a:	26 2b       	or	r18, r22
 56c:	fc 01       	movw	r30, r24
 56e:	20 83       	st	Z, r18
				return OK;
 570:	81 e0       	ldi	r24, 0x01	; 1
 572:	7d c0       	rjmp	.+250    	; 0x66e <DIO_u8SetPinValue+0x224>
			}
			else //IF THE VALUE NEITHER HIGH NOR LOW RETURNING AN ERROR SIGNAL
				return ERROR;
 574:	80 e0       	ldi	r24, 0x00	; 0
 576:	7b c0       	rjmp	.+246    	; 0x66e <DIO_u8SetPinValue+0x224>
    case 19:
   	case 20 :
   	case 21:
    case 22:
   	case 23:
		if (Copy_u8PinValue == DIO_LOW)//CHECKING IF THE THE VALUE OF THE  REQUIRED PIN WHICH BELONGS TO DDRC IS LOW AND ASSIGN
 578:	8a 81       	ldd	r24, Y+2	; 0x02
 57a:	88 23       	and	r24, r24
 57c:	d9 f4       	brne	.+54     	; 0x5b4 <DIO_u8SetPinValue+0x16a>
		{								//THE CORESSPONDING VALUE
			clrBit(PORTC,(Copy_u8PinNumber%8));
 57e:	85 e3       	ldi	r24, 0x35	; 53
 580:	90 e0       	ldi	r25, 0x00	; 0
 582:	25 e3       	ldi	r18, 0x35	; 53
 584:	30 e0       	ldi	r19, 0x00	; 0
 586:	f9 01       	movw	r30, r18
 588:	20 81       	ld	r18, Z
 58a:	62 2f       	mov	r22, r18
 58c:	29 81       	ldd	r18, Y+1	; 0x01
 58e:	22 2f       	mov	r18, r18
 590:	30 e0       	ldi	r19, 0x00	; 0
 592:	a9 01       	movw	r20, r18
 594:	47 70       	andi	r20, 0x07	; 7
 596:	55 27       	eor	r21, r21
 598:	21 e0       	ldi	r18, 0x01	; 1
 59a:	30 e0       	ldi	r19, 0x00	; 0
 59c:	04 2e       	mov	r0, r20
 59e:	02 c0       	rjmp	.+4      	; 0x5a4 <DIO_u8SetPinValue+0x15a>
 5a0:	22 0f       	add	r18, r18
 5a2:	33 1f       	adc	r19, r19
 5a4:	0a 94       	dec	r0
 5a6:	e2 f7       	brpl	.-8      	; 0x5a0 <DIO_u8SetPinValue+0x156>
 5a8:	20 95       	com	r18
 5aa:	26 23       	and	r18, r22
 5ac:	fc 01       	movw	r30, r24
 5ae:	20 83       	st	Z, r18
			return OK;
 5b0:	81 e0       	ldi	r24, 0x01	; 1
 5b2:	5d c0       	rjmp	.+186    	; 0x66e <DIO_u8SetPinValue+0x224>
		}
		else if (Copy_u8PinValue == DIO_HIGH)//CHECKING IF THE THE VALUE OF THE  REQUIRED PIN WHICH BELONGS TO DDRC IS HIGH AND ASSIGN
 5b4:	8a 81       	ldd	r24, Y+2	; 0x02
 5b6:	81 30       	cpi	r24, 0x01	; 1
 5b8:	d1 f4       	brne	.+52     	; 0x5ee <DIO_u8SetPinValue+0x1a4>
		{									//THE CORESSPONDING VALUE
			setBit(PORTC,(Copy_u8PinNumber%8));
 5ba:	85 e3       	ldi	r24, 0x35	; 53
 5bc:	90 e0       	ldi	r25, 0x00	; 0
 5be:	25 e3       	ldi	r18, 0x35	; 53
 5c0:	30 e0       	ldi	r19, 0x00	; 0
 5c2:	f9 01       	movw	r30, r18
 5c4:	20 81       	ld	r18, Z
 5c6:	62 2f       	mov	r22, r18
 5c8:	29 81       	ldd	r18, Y+1	; 0x01
 5ca:	22 2f       	mov	r18, r18
 5cc:	30 e0       	ldi	r19, 0x00	; 0
 5ce:	a9 01       	movw	r20, r18
 5d0:	47 70       	andi	r20, 0x07	; 7
 5d2:	55 27       	eor	r21, r21
 5d4:	21 e0       	ldi	r18, 0x01	; 1
 5d6:	30 e0       	ldi	r19, 0x00	; 0
 5d8:	04 2e       	mov	r0, r20
 5da:	02 c0       	rjmp	.+4      	; 0x5e0 <DIO_u8SetPinValue+0x196>
 5dc:	22 0f       	add	r18, r18
 5de:	33 1f       	adc	r19, r19
 5e0:	0a 94       	dec	r0
 5e2:	e2 f7       	brpl	.-8      	; 0x5dc <DIO_u8SetPinValue+0x192>
 5e4:	26 2b       	or	r18, r22
 5e6:	fc 01       	movw	r30, r24
 5e8:	20 83       	st	Z, r18
			return OK;
 5ea:	81 e0       	ldi	r24, 0x01	; 1
 5ec:	40 c0       	rjmp	.+128    	; 0x66e <DIO_u8SetPinValue+0x224>
		}
		else //IF THE VALUE NEITHER HIGH NOR LOW RETURNING AN ERROR SIGNAL
			return ERROR;
 5ee:	80 e0       	ldi	r24, 0x00	; 0
 5f0:	3e c0       	rjmp	.+124    	; 0x66e <DIO_u8SetPinValue+0x224>
   	case 27:
   	case 28:
   	case 29:
   	case 30:
   	case 31:
		if (Copy_u8PinValue == DIO_LOW)//CHECKING IF THE THE VALUE OF THE  REQUIRED PIN WHICH BELONGS TO DDRD IS LOW AND ASSIGN
 5f2:	8a 81       	ldd	r24, Y+2	; 0x02
 5f4:	88 23       	and	r24, r24
 5f6:	d9 f4       	brne	.+54     	; 0x62e <DIO_u8SetPinValue+0x1e4>
		{							  //THE CORESSPONDING VALUE
			clrBit(PORTD,(Copy_u8PinNumber%8));
 5f8:	82 e3       	ldi	r24, 0x32	; 50
 5fa:	90 e0       	ldi	r25, 0x00	; 0
 5fc:	22 e3       	ldi	r18, 0x32	; 50
 5fe:	30 e0       	ldi	r19, 0x00	; 0
 600:	f9 01       	movw	r30, r18
 602:	20 81       	ld	r18, Z
 604:	62 2f       	mov	r22, r18
 606:	29 81       	ldd	r18, Y+1	; 0x01
 608:	22 2f       	mov	r18, r18
 60a:	30 e0       	ldi	r19, 0x00	; 0
 60c:	a9 01       	movw	r20, r18
 60e:	47 70       	andi	r20, 0x07	; 7
 610:	55 27       	eor	r21, r21
 612:	21 e0       	ldi	r18, 0x01	; 1
 614:	30 e0       	ldi	r19, 0x00	; 0
 616:	04 2e       	mov	r0, r20
 618:	02 c0       	rjmp	.+4      	; 0x61e <DIO_u8SetPinValue+0x1d4>
 61a:	22 0f       	add	r18, r18
 61c:	33 1f       	adc	r19, r19
 61e:	0a 94       	dec	r0
 620:	e2 f7       	brpl	.-8      	; 0x61a <DIO_u8SetPinValue+0x1d0>
 622:	20 95       	com	r18
 624:	26 23       	and	r18, r22
 626:	fc 01       	movw	r30, r24
 628:	20 83       	st	Z, r18
			return OK;
 62a:	81 e0       	ldi	r24, 0x01	; 1
 62c:	20 c0       	rjmp	.+64     	; 0x66e <DIO_u8SetPinValue+0x224>
		}
		else if (Copy_u8PinValue == DIO_HIGH)//CHECKING IF THE THE VALUE OF THE  REQUIRED PIN WHICH BELONGS TO DDRD IS LOW AND ASSIGN
 62e:	8a 81       	ldd	r24, Y+2	; 0x02
 630:	81 30       	cpi	r24, 0x01	; 1
 632:	d1 f4       	brne	.+52     	; 0x668 <DIO_u8SetPinValue+0x21e>
		{									//THE CORESSPONDING VALUE
			setBit(PORTD,(Copy_u8PinNumber%8));
 634:	82 e3       	ldi	r24, 0x32	; 50
 636:	90 e0       	ldi	r25, 0x00	; 0
 638:	22 e3       	ldi	r18, 0x32	; 50
 63a:	30 e0       	ldi	r19, 0x00	; 0
 63c:	f9 01       	movw	r30, r18
 63e:	20 81       	ld	r18, Z
 640:	62 2f       	mov	r22, r18
 642:	29 81       	ldd	r18, Y+1	; 0x01
 644:	22 2f       	mov	r18, r18
 646:	30 e0       	ldi	r19, 0x00	; 0
 648:	a9 01       	movw	r20, r18
 64a:	47 70       	andi	r20, 0x07	; 7
 64c:	55 27       	eor	r21, r21
 64e:	21 e0       	ldi	r18, 0x01	; 1
 650:	30 e0       	ldi	r19, 0x00	; 0
 652:	04 2e       	mov	r0, r20
 654:	02 c0       	rjmp	.+4      	; 0x65a <DIO_u8SetPinValue+0x210>
 656:	22 0f       	add	r18, r18
 658:	33 1f       	adc	r19, r19
 65a:	0a 94       	dec	r0
 65c:	e2 f7       	brpl	.-8      	; 0x656 <DIO_u8SetPinValue+0x20c>
 65e:	26 2b       	or	r18, r22
 660:	fc 01       	movw	r30, r24
 662:	20 83       	st	Z, r18
			return OK;
 664:	81 e0       	ldi	r24, 0x01	; 1
 666:	03 c0       	rjmp	.+6      	; 0x66e <DIO_u8SetPinValue+0x224>
		}
		else //IF THE VALUE NEITHER HIGH NOR LOW RETURNING AN ERROR SIGNAL
			return ERROR;
 668:	80 e0       	ldi	r24, 0x00	; 0
 66a:	01 c0       	rjmp	.+2      	; 0x66e <DIO_u8SetPinValue+0x224>
	break;
	}
return ERROR; // RETURNING THE ERROR INDICATOR INCASE OF ANY UNEXPECTED EVENT
 66c:	80 e0       	ldi	r24, 0x00	; 0



}
 66e:	0f 90       	pop	r0
 670:	0f 90       	pop	r0
 672:	df 91       	pop	r29
 674:	cf 91       	pop	r28
 676:	08 95       	ret

00000678 <DIO_u8GetPortValue>:
 * **************************************************************************************************************/



u8 DIO_u8GetPortValue(u8 Copy_u8PortName,pu8 Copy_pu8ReturnedValue) // HEADER OF THE FUNCTION
{
 678:	cf 93       	push	r28
 67a:	df 93       	push	r29
 67c:	00 d0       	rcall	.+0      	; 0x67e <DIO_u8GetPortValue+0x6>
 67e:	1f 92       	push	r1
 680:	cd b7       	in	r28, 0x3d	; 61
 682:	de b7       	in	r29, 0x3e	; 62
 684:	89 83       	std	Y+1, r24	; 0x01
 686:	7b 83       	std	Y+3, r23	; 0x03
 688:	6a 83       	std	Y+2, r22	; 0x02

return Copy_u8PortName;
 68a:	89 81       	ldd	r24, Y+1	; 0x01


}
 68c:	0f 90       	pop	r0
 68e:	0f 90       	pop	r0
 690:	0f 90       	pop	r0
 692:	df 91       	pop	r29
 694:	cf 91       	pop	r28
 696:	08 95       	ret

00000698 <DIO_u8GetPinValue>:
 * 																												*
 * 																												*
 * **************************************************************************************************************/

u8 DIO_u8GetPinValue(u8 Copy_u8PinNumber,pu8 Copy_pu8ReturnedValue) // HEADER OF THE FUNCTION
{
 698:	cf 93       	push	r28
 69a:	df 93       	push	r29
 69c:	00 d0       	rcall	.+0      	; 0x69e <DIO_u8GetPinValue+0x6>
 69e:	1f 92       	push	r1
 6a0:	cd b7       	in	r28, 0x3d	; 61
 6a2:	de b7       	in	r29, 0x3e	; 62
 6a4:	89 83       	std	Y+1, r24	; 0x01
 6a6:	7b 83       	std	Y+3, r23	; 0x03
 6a8:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8PinNumber)
 6aa:	89 81       	ldd	r24, Y+1	; 0x01
 6ac:	88 2f       	mov	r24, r24
 6ae:	90 e0       	ldi	r25, 0x00	; 0
 6b0:	aa 27       	eor	r26, r26
 6b2:	97 fd       	sbrc	r25, 7
 6b4:	a0 95       	com	r26
 6b6:	ba 2f       	mov	r27, r26
 6b8:	40 e0       	ldi	r20, 0x00	; 0
 6ba:	50 e0       	ldi	r21, 0x00	; 0
 6bc:	2f e1       	ldi	r18, 0x1F	; 31
 6be:	30 e0       	ldi	r19, 0x00	; 0
 6c0:	84 1b       	sub	r24, r20
 6c2:	95 0b       	sbc	r25, r21
 6c4:	28 17       	cp	r18, r24
 6c6:	39 07       	cpc	r19, r25
 6c8:	08 f4       	brcc	.+2      	; 0x6cc <DIO_u8GetPinValue+0x34>
 6ca:	63 c0       	rjmp	.+198    	; 0x792 <DIO_u8GetPinValue+0xfa>
 6cc:	86 59       	subi	r24, 0x96	; 150
 6ce:	9f 4f       	sbci	r25, 0xFF	; 255
 6d0:	fc 01       	movw	r30, r24
 6d2:	0c 94 4c 06 	jmp	0xc98	; 0xc98 <__tablejump2__>
	case 3:
	case 4:
	case 5:
	case 6:
	case 7:
         *(Copy_pu8ReturnedValue)=getBit(PINA,Copy_u8PinNumber);
 6d6:	89 e3       	ldi	r24, 0x39	; 57
 6d8:	90 e0       	ldi	r25, 0x00	; 0
 6da:	fc 01       	movw	r30, r24
 6dc:	80 81       	ld	r24, Z
 6de:	88 2f       	mov	r24, r24
 6e0:	90 e0       	ldi	r25, 0x00	; 0
 6e2:	29 81       	ldd	r18, Y+1	; 0x01
 6e4:	22 2f       	mov	r18, r18
 6e6:	30 e0       	ldi	r19, 0x00	; 0
 6e8:	02 c0       	rjmp	.+4      	; 0x6ee <DIO_u8GetPinValue+0x56>
 6ea:	95 95       	asr	r25
 6ec:	87 95       	ror	r24
 6ee:	2a 95       	dec	r18
 6f0:	e2 f7       	brpl	.-8      	; 0x6ea <DIO_u8GetPinValue+0x52>
 6f2:	28 2f       	mov	r18, r24
 6f4:	21 70       	andi	r18, 0x01	; 1
 6f6:	8a 81       	ldd	r24, Y+2	; 0x02
 6f8:	9b 81       	ldd	r25, Y+3	; 0x03
 6fa:	fc 01       	movw	r30, r24
 6fc:	20 83       	st	Z, r18
         return OK;
 6fe:	81 e0       	ldi	r24, 0x01	; 1
 700:	49 c0       	rjmp	.+146    	; 0x794 <DIO_u8GetPinValue+0xfc>
	case 11:
	case 12:
	case 13:
    case 14:
	case 15:
        *(Copy_pu8ReturnedValue)=getBit(PINB,Copy_u8PinNumber%8);
 702:	86 e3       	ldi	r24, 0x36	; 54
 704:	90 e0       	ldi	r25, 0x00	; 0
 706:	fc 01       	movw	r30, r24
 708:	80 81       	ld	r24, Z
 70a:	88 2f       	mov	r24, r24
 70c:	90 e0       	ldi	r25, 0x00	; 0
 70e:	29 81       	ldd	r18, Y+1	; 0x01
 710:	22 2f       	mov	r18, r18
 712:	30 e0       	ldi	r19, 0x00	; 0
 714:	27 70       	andi	r18, 0x07	; 7
 716:	33 27       	eor	r19, r19
 718:	02 c0       	rjmp	.+4      	; 0x71e <DIO_u8GetPinValue+0x86>
 71a:	95 95       	asr	r25
 71c:	87 95       	ror	r24
 71e:	2a 95       	dec	r18
 720:	e2 f7       	brpl	.-8      	; 0x71a <DIO_u8GetPinValue+0x82>
 722:	28 2f       	mov	r18, r24
 724:	21 70       	andi	r18, 0x01	; 1
 726:	8a 81       	ldd	r24, Y+2	; 0x02
 728:	9b 81       	ldd	r25, Y+3	; 0x03
 72a:	fc 01       	movw	r30, r24
 72c:	20 83       	st	Z, r18
        return OK;
 72e:	81 e0       	ldi	r24, 0x01	; 1
 730:	31 c0       	rjmp	.+98     	; 0x794 <DIO_u8GetPinValue+0xfc>
    case 19:
   	case 20 :
   	case 21:
    case 22:
   	case 23:
        *(Copy_pu8ReturnedValue)=getBit(PINC,Copy_u8PinNumber%8);
 732:	83 e3       	ldi	r24, 0x33	; 51
 734:	90 e0       	ldi	r25, 0x00	; 0
 736:	fc 01       	movw	r30, r24
 738:	80 81       	ld	r24, Z
 73a:	88 2f       	mov	r24, r24
 73c:	90 e0       	ldi	r25, 0x00	; 0
 73e:	29 81       	ldd	r18, Y+1	; 0x01
 740:	22 2f       	mov	r18, r18
 742:	30 e0       	ldi	r19, 0x00	; 0
 744:	27 70       	andi	r18, 0x07	; 7
 746:	33 27       	eor	r19, r19
 748:	02 c0       	rjmp	.+4      	; 0x74e <DIO_u8GetPinValue+0xb6>
 74a:	95 95       	asr	r25
 74c:	87 95       	ror	r24
 74e:	2a 95       	dec	r18
 750:	e2 f7       	brpl	.-8      	; 0x74a <DIO_u8GetPinValue+0xb2>
 752:	28 2f       	mov	r18, r24
 754:	21 70       	andi	r18, 0x01	; 1
 756:	8a 81       	ldd	r24, Y+2	; 0x02
 758:	9b 81       	ldd	r25, Y+3	; 0x03
 75a:	fc 01       	movw	r30, r24
 75c:	20 83       	st	Z, r18
        return OK;
 75e:	81 e0       	ldi	r24, 0x01	; 1
 760:	19 c0       	rjmp	.+50     	; 0x794 <DIO_u8GetPinValue+0xfc>
   	case 27:
   	case 28:
   	case 29:
   	case 30:
   	case 31:
        *(Copy_pu8ReturnedValue)=getBit(PIND,Copy_u8PinNumber%8);
 762:	80 e3       	ldi	r24, 0x30	; 48
 764:	90 e0       	ldi	r25, 0x00	; 0
 766:	fc 01       	movw	r30, r24
 768:	80 81       	ld	r24, Z
 76a:	88 2f       	mov	r24, r24
 76c:	90 e0       	ldi	r25, 0x00	; 0
 76e:	29 81       	ldd	r18, Y+1	; 0x01
 770:	22 2f       	mov	r18, r18
 772:	30 e0       	ldi	r19, 0x00	; 0
 774:	27 70       	andi	r18, 0x07	; 7
 776:	33 27       	eor	r19, r19
 778:	02 c0       	rjmp	.+4      	; 0x77e <DIO_u8GetPinValue+0xe6>
 77a:	95 95       	asr	r25
 77c:	87 95       	ror	r24
 77e:	2a 95       	dec	r18
 780:	e2 f7       	brpl	.-8      	; 0x77a <DIO_u8GetPinValue+0xe2>
 782:	28 2f       	mov	r18, r24
 784:	21 70       	andi	r18, 0x01	; 1
 786:	8a 81       	ldd	r24, Y+2	; 0x02
 788:	9b 81       	ldd	r25, Y+3	; 0x03
 78a:	fc 01       	movw	r30, r24
 78c:	20 83       	st	Z, r18
        return OK;
 78e:	81 e0       	ldi	r24, 0x01	; 1
 790:	01 c0       	rjmp	.+2      	; 0x794 <DIO_u8GetPinValue+0xfc>
        break;
   	default : return ERROR;
 792:	80 e0       	ldi	r24, 0x00	; 0
	}
return ERROR;



}
 794:	0f 90       	pop	r0
 796:	0f 90       	pop	r0
 798:	0f 90       	pop	r0
 79a:	df 91       	pop	r29
 79c:	cf 91       	pop	r28
 79e:	08 95       	ret

000007a0 <KEYPAD_u8Init>:


};*/

u8 KEYPAD_u8Init(void)
{
 7a0:	cf 93       	push	r28
 7a2:	df 93       	push	r29
 7a4:	cd b7       	in	r28, 0x3d	; 61
 7a6:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinDirection(PIN_16,DIO_OUTPUT);
 7a8:	61 e0       	ldi	r22, 0x01	; 1
 7aa:	80 e1       	ldi	r24, 0x10	; 16
 7ac:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(PIN_17,DIO_OUTPUT);
 7b0:	61 e0       	ldi	r22, 0x01	; 1
 7b2:	81 e1       	ldi	r24, 0x11	; 17
 7b4:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(PIN_18,DIO_OUTPUT);
 7b8:	61 e0       	ldi	r22, 0x01	; 1
 7ba:	82 e1       	ldi	r24, 0x12	; 18
 7bc:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(PIN_19,DIO_OUTPUT);
 7c0:	61 e0       	ldi	r22, 0x01	; 1
 7c2:	83 e1       	ldi	r24, 0x13	; 19
 7c4:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <DIO_u8SetPinDirection>

	DIO_u8SetPinDirection(PIN_20,DIO_INPUT);
 7c8:	60 e0       	ldi	r22, 0x00	; 0
 7ca:	84 e1       	ldi	r24, 0x14	; 20
 7cc:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(PIN_21,DIO_INPUT);
 7d0:	60 e0       	ldi	r22, 0x00	; 0
 7d2:	85 e1       	ldi	r24, 0x15	; 21
 7d4:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(PIN_22,DIO_INPUT);
 7d8:	60 e0       	ldi	r22, 0x00	; 0
 7da:	86 e1       	ldi	r24, 0x16	; 22
 7dc:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(PIN_23,DIO_INPUT);
 7e0:	60 e0       	ldi	r22, 0x00	; 0
 7e2:	87 e1       	ldi	r24, 0x17	; 23
 7e4:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <DIO_u8SetPinDirection>

	DIO_u8SetPinValue(PIN_16, DIO_HIGH);
 7e8:	61 e0       	ldi	r22, 0x01	; 1
 7ea:	80 e1       	ldi	r24, 0x10	; 16
 7ec:	0e 94 25 02 	call	0x44a	; 0x44a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(PIN_17, DIO_HIGH);
 7f0:	61 e0       	ldi	r22, 0x01	; 1
 7f2:	81 e1       	ldi	r24, 0x11	; 17
 7f4:	0e 94 25 02 	call	0x44a	; 0x44a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(PIN_18, DIO_HIGH);
 7f8:	61 e0       	ldi	r22, 0x01	; 1
 7fa:	82 e1       	ldi	r24, 0x12	; 18
 7fc:	0e 94 25 02 	call	0x44a	; 0x44a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(PIN_19, DIO_HIGH);
 800:	61 e0       	ldi	r22, 0x01	; 1
 802:	83 e1       	ldi	r24, 0x13	; 19
 804:	0e 94 25 02 	call	0x44a	; 0x44a <DIO_u8SetPinValue>

	DIO_u8SetPinValue(PIN_20, DIO_HIGH);
 808:	61 e0       	ldi	r22, 0x01	; 1
 80a:	84 e1       	ldi	r24, 0x14	; 20
 80c:	0e 94 25 02 	call	0x44a	; 0x44a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(PIN_21, DIO_HIGH);
 810:	61 e0       	ldi	r22, 0x01	; 1
 812:	85 e1       	ldi	r24, 0x15	; 21
 814:	0e 94 25 02 	call	0x44a	; 0x44a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(PIN_22, DIO_HIGH);
 818:	61 e0       	ldi	r22, 0x01	; 1
 81a:	86 e1       	ldi	r24, 0x16	; 22
 81c:	0e 94 25 02 	call	0x44a	; 0x44a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(PIN_23, DIO_HIGH);
 820:	61 e0       	ldi	r22, 0x01	; 1
 822:	87 e1       	ldi	r24, 0x17	; 23
 824:	0e 94 25 02 	call	0x44a	; 0x44a <DIO_u8SetPinValue>

return OK;
 828:	81 e0       	ldi	r24, 0x01	; 1
}
 82a:	df 91       	pop	r29
 82c:	cf 91       	pop	r28
 82e:	08 95       	ret

00000830 <KEYPAD_u8GetKeyValue>:

u8 KEYPAD_u8GetKeyValue(u8 Copy_u8PinNumber,pu8 Copy_pu8KeyStatus)
{
 830:	cf 93       	push	r28
 832:	df 93       	push	r29
 834:	cd b7       	in	r28, 0x3d	; 61
 836:	de b7       	in	r29, 0x3e	; 62
 838:	63 97       	sbiw	r28, 0x13	; 19
 83a:	0f b6       	in	r0, 0x3f	; 63
 83c:	f8 94       	cli
 83e:	de bf       	out	0x3e, r29	; 62
 840:	0f be       	out	0x3f, r0	; 63
 842:	cd bf       	out	0x3d, r28	; 61
 844:	89 8b       	std	Y+17, r24	; 0x11
 846:	7b 8b       	std	Y+19, r23	; 0x13
 848:	6a 8b       	std	Y+18, r22	; 0x12


	u8 Local_u8KeypadPins[8]={KEYPAD_ROW1,KEYPAD_ROW2,KEYPAD_ROW3,KEYPAD_ROW4,KEYPAD_Coloumn1,KEYPAD_Coloumn2,KEYPAD_Coloumn3,KEYPAD_Coloumn4};
 84a:	88 e0       	ldi	r24, 0x08	; 8
 84c:	e0 e6       	ldi	r30, 0x60	; 96
 84e:	f0 e0       	ldi	r31, 0x00	; 0
 850:	de 01       	movw	r26, r28
 852:	14 96       	adiw	r26, 0x04	; 4
 854:	01 90       	ld	r0, Z+
 856:	0d 92       	st	X+, r0
 858:	8a 95       	dec	r24
 85a:	e1 f7       	brne	.-8      	; 0x854 <KEYPAD_u8GetKeyValue+0x24>

	u8 Local_u8RowsValue [4]={KEYPAD_ROW1ON,KEYPAD_ROW2ON,KEYPAD_ROW3ON,KEYPAD_ROW4ON};
 85c:	8e e0       	ldi	r24, 0x0E	; 14
 85e:	8c 87       	std	Y+12, r24	; 0x0c
 860:	8d e0       	ldi	r24, 0x0D	; 13
 862:	8d 87       	std	Y+13, r24	; 0x0d
 864:	8b e0       	ldi	r24, 0x0B	; 11
 866:	8e 87       	std	Y+14, r24	; 0x0e
 868:	87 e0       	ldi	r24, 0x07	; 7
 86a:	8f 87       	std	Y+15, r24	; 0x0f

	u8 Local_u8KeypadSuccedStatus=ERROR, Local_u8Counter=KEYPAD_ROWS_COUNTER_INITIAL,Local_u8BitCounter=KEYPAD_BITNUMBERS_INITIAL;
 86c:	1b 82       	std	Y+3, r1	; 0x03
 86e:	19 82       	std	Y+1, r1	; 0x01
 870:	1a 82       	std	Y+2, r1	; 0x02

	u8 Local_u8ColoumnValue=DIO_HIGH;
 872:	81 e0       	ldi	r24, 0x01	; 1
 874:	88 8b       	std	Y+16, r24	; 0x10

	for (Local_u8Counter=KEYPAD_ROWS_COUNTER_INITIAL;KEYPAD_ROWS_COUNTER_MAXIMUM;Local_u8Counter++)
 876:	19 82       	std	Y+1, r1	; 0x01
	{
		for (Local_u8BitCounter=KEYPAD_BITNUMBERS_INITIAL;KEYPAD_BITNUMBERS_MAXIMUM>Local_u8BitCounter;Local_u8BitCounter++)
 878:	1a 82       	std	Y+2, r1	; 0x02
 87a:	50 c0       	rjmp	.+160    	; 0x91c <__stack+0xbd>
		{
			if ( LOW==getBit(Local_u8RowsValue[Local_u8Counter],(Local_u8BitCounter)))
 87c:	89 81       	ldd	r24, Y+1	; 0x01
 87e:	88 2f       	mov	r24, r24
 880:	90 e0       	ldi	r25, 0x00	; 0
 882:	9e 01       	movw	r18, r28
 884:	24 5f       	subi	r18, 0xF4	; 244
 886:	3f 4f       	sbci	r19, 0xFF	; 255
 888:	82 0f       	add	r24, r18
 88a:	93 1f       	adc	r25, r19
 88c:	fc 01       	movw	r30, r24
 88e:	80 81       	ld	r24, Z
 890:	88 2f       	mov	r24, r24
 892:	90 e0       	ldi	r25, 0x00	; 0
 894:	2a 81       	ldd	r18, Y+2	; 0x02
 896:	22 2f       	mov	r18, r18
 898:	30 e0       	ldi	r19, 0x00	; 0
 89a:	02 2e       	mov	r0, r18
 89c:	02 c0       	rjmp	.+4      	; 0x8a2 <__stack+0x43>
 89e:	95 95       	asr	r25
 8a0:	87 95       	ror	r24
 8a2:	0a 94       	dec	r0
 8a4:	e2 f7       	brpl	.-8      	; 0x89e <__stack+0x3f>
 8a6:	81 70       	andi	r24, 0x01	; 1
 8a8:	99 27       	eor	r25, r25
 8aa:	00 97       	sbiw	r24, 0x00	; 0
 8ac:	71 f4       	brne	.+28     	; 0x8ca <__stack+0x6b>
					{
					DIO_u8SetPinValue(Local_u8KeypadPins[Local_u8Counter],DIO_LOW);
 8ae:	89 81       	ldd	r24, Y+1	; 0x01
 8b0:	88 2f       	mov	r24, r24
 8b2:	90 e0       	ldi	r25, 0x00	; 0
 8b4:	9e 01       	movw	r18, r28
 8b6:	2c 5f       	subi	r18, 0xFC	; 252
 8b8:	3f 4f       	sbci	r19, 0xFF	; 255
 8ba:	82 0f       	add	r24, r18
 8bc:	93 1f       	adc	r25, r19
 8be:	fc 01       	movw	r30, r24
 8c0:	80 81       	ld	r24, Z
 8c2:	60 e0       	ldi	r22, 0x00	; 0
 8c4:	0e 94 25 02 	call	0x44a	; 0x44a <DIO_u8SetPinValue>
 8c8:	26 c0       	rjmp	.+76     	; 0x916 <__stack+0xb7>
					}
			else if( HIGH==getBit((Local_u8RowsValue[Local_u8Counter]),(Local_u8BitCounter)))
 8ca:	89 81       	ldd	r24, Y+1	; 0x01
 8cc:	88 2f       	mov	r24, r24
 8ce:	90 e0       	ldi	r25, 0x00	; 0
 8d0:	9e 01       	movw	r18, r28
 8d2:	24 5f       	subi	r18, 0xF4	; 244
 8d4:	3f 4f       	sbci	r19, 0xFF	; 255
 8d6:	82 0f       	add	r24, r18
 8d8:	93 1f       	adc	r25, r19
 8da:	fc 01       	movw	r30, r24
 8dc:	80 81       	ld	r24, Z
 8de:	88 2f       	mov	r24, r24
 8e0:	90 e0       	ldi	r25, 0x00	; 0
 8e2:	2a 81       	ldd	r18, Y+2	; 0x02
 8e4:	22 2f       	mov	r18, r18
 8e6:	30 e0       	ldi	r19, 0x00	; 0
 8e8:	02 2e       	mov	r0, r18
 8ea:	02 c0       	rjmp	.+4      	; 0x8f0 <__stack+0x91>
 8ec:	95 95       	asr	r25
 8ee:	87 95       	ror	r24
 8f0:	0a 94       	dec	r0
 8f2:	e2 f7       	brpl	.-8      	; 0x8ec <__stack+0x8d>
 8f4:	81 70       	andi	r24, 0x01	; 1
 8f6:	99 27       	eor	r25, r25
 8f8:	00 97       	sbiw	r24, 0x00	; 0
 8fa:	69 f0       	breq	.+26     	; 0x916 <__stack+0xb7>
			{
				DIO_u8SetPinValue(Local_u8KeypadPins[Local_u8Counter],DIO_HIGH);
 8fc:	89 81       	ldd	r24, Y+1	; 0x01
 8fe:	88 2f       	mov	r24, r24
 900:	90 e0       	ldi	r25, 0x00	; 0
 902:	9e 01       	movw	r18, r28
 904:	2c 5f       	subi	r18, 0xFC	; 252
 906:	3f 4f       	sbci	r19, 0xFF	; 255
 908:	82 0f       	add	r24, r18
 90a:	93 1f       	adc	r25, r19
 90c:	fc 01       	movw	r30, r24
 90e:	80 81       	ld	r24, Z
 910:	61 e0       	ldi	r22, 0x01	; 1
 912:	0e 94 25 02 	call	0x44a	; 0x44a <DIO_u8SetPinValue>

	u8 Local_u8ColoumnValue=DIO_HIGH;

	for (Local_u8Counter=KEYPAD_ROWS_COUNTER_INITIAL;KEYPAD_ROWS_COUNTER_MAXIMUM;Local_u8Counter++)
	{
		for (Local_u8BitCounter=KEYPAD_BITNUMBERS_INITIAL;KEYPAD_BITNUMBERS_MAXIMUM>Local_u8BitCounter;Local_u8BitCounter++)
 916:	8a 81       	ldd	r24, Y+2	; 0x02
 918:	8f 5f       	subi	r24, 0xFF	; 255
 91a:	8a 83       	std	Y+2, r24	; 0x02
 91c:	8a 81       	ldd	r24, Y+2	; 0x02
 91e:	84 30       	cpi	r24, 0x04	; 4
 920:	08 f4       	brcc	.+2      	; 0x924 <__stack+0xc5>
 922:	ac cf       	rjmp	.-168    	; 0x87c <__stack+0x1d>
				DIO_u8SetPinValue(Local_u8KeypadPins[Local_u8Counter],DIO_HIGH);
			}
		}


		for (Local_u8Counter=KEYPAD_COLOUMN_COUNTER_INITIAL;KEYPAD_COLOUMN_COUNTER_MAXIMUM<Local_u8Counter;Local_u8Counter)
 924:	84 e0       	ldi	r24, 0x04	; 4
 926:	89 83       	std	Y+1, r24	; 0x01
 928:	06 c0       	rjmp	.+12     	; 0x936 <__stack+0xd7>
		{
			DIO_u8GetPinValue(KEYPAD_Coloumn1,&Local_u8ColoumnValue);
 92a:	ce 01       	movw	r24, r28
 92c:	40 96       	adiw	r24, 0x10	; 16
 92e:	bc 01       	movw	r22, r24
 930:	84 e1       	ldi	r24, 0x14	; 20
 932:	0e 94 4c 03 	call	0x698	; 0x698 <DIO_u8GetPinValue>
				DIO_u8SetPinValue(Local_u8KeypadPins[Local_u8Counter],DIO_HIGH);
			}
		}


		for (Local_u8Counter=KEYPAD_COLOUMN_COUNTER_INITIAL;KEYPAD_COLOUMN_COUNTER_MAXIMUM<Local_u8Counter;Local_u8Counter)
 936:	89 81       	ldd	r24, Y+1	; 0x01
 938:	89 30       	cpi	r24, 0x09	; 9
 93a:	b8 f7       	brcc	.-18     	; 0x92a <__stack+0xcb>

	u8 Local_u8KeypadSuccedStatus=ERROR, Local_u8Counter=KEYPAD_ROWS_COUNTER_INITIAL,Local_u8BitCounter=KEYPAD_BITNUMBERS_INITIAL;

	u8 Local_u8ColoumnValue=DIO_HIGH;

	for (Local_u8Counter=KEYPAD_ROWS_COUNTER_INITIAL;KEYPAD_ROWS_COUNTER_MAXIMUM;Local_u8Counter++)
 93c:	89 81       	ldd	r24, Y+1	; 0x01
 93e:	8f 5f       	subi	r24, 0xFF	; 255
 940:	89 83       	std	Y+1, r24	; 0x01



			}
		}
	}
 942:	9a cf       	rjmp	.-204    	; 0x878 <__stack+0x19>

00000944 <LCD_voidWriteCommand>:
#include "DIO_Private.h"
#include "delay_ms.h"


void LCD_voidWriteCommand(u8 Copy_Command)
{
 944:	cf 93       	push	r28
 946:	df 93       	push	r29
 948:	1f 92       	push	r1
 94a:	cd b7       	in	r28, 0x3d	; 61
 94c:	de b7       	in	r29, 0x3e	; 62
 94e:	89 83       	std	Y+1, r24	; 0x01

	DIO_u8SetPinValue(PIN_2,DIO_LOW);
 950:	60 e0       	ldi	r22, 0x00	; 0
 952:	82 e0       	ldi	r24, 0x02	; 2
 954:	0e 94 25 02 	call	0x44a	; 0x44a <DIO_u8SetPinValue>

DIO_u8SetPinValue(PIN_0,DIO_LOW);
 958:	60 e0       	ldi	r22, 0x00	; 0
 95a:	80 e0       	ldi	r24, 0x00	; 0
 95c:	0e 94 25 02 	call	0x44a	; 0x44a <DIO_u8SetPinValue>
DIO_u8SetPinValue(PIN_1,DIO_LOW);
 960:	60 e0       	ldi	r22, 0x00	; 0
 962:	81 e0       	ldi	r24, 0x01	; 1
 964:	0e 94 25 02 	call	0x44a	; 0x44a <DIO_u8SetPinValue>
DIO_u8SetPortValue(PORT_D,Copy_Command);
 968:	69 81       	ldd	r22, Y+1	; 0x01
 96a:	82 e3       	ldi	r24, 0x32	; 50
 96c:	90 e0       	ldi	r25, 0x00	; 0
 96e:	0e 94 10 02 	call	0x420	; 0x420 <DIO_u8SetPortValue>
DIO_u8SetPinValue(PIN_2,DIO_HIGH);
 972:	61 e0       	ldi	r22, 0x01	; 1
 974:	82 e0       	ldi	r24, 0x02	; 2
 976:	0e 94 25 02 	call	0x44a	; 0x44a <DIO_u8SetPinValue>
delay_ms(2);
 97a:	62 e0       	ldi	r22, 0x02	; 2
 97c:	70 e0       	ldi	r23, 0x00	; 0
 97e:	80 e0       	ldi	r24, 0x00	; 0
 980:	90 e0       	ldi	r25, 0x00	; 0
 982:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <delay_ms>
DIO_u8SetPinValue(PIN_2,DIO_LOW);
 986:	60 e0       	ldi	r22, 0x00	; 0
 988:	82 e0       	ldi	r24, 0x02	; 2
 98a:	0e 94 25 02 	call	0x44a	; 0x44a <DIO_u8SetPinValue>
}
 98e:	0f 90       	pop	r0
 990:	df 91       	pop	r29
 992:	cf 91       	pop	r28
 994:	08 95       	ret

00000996 <LCD_voidWriteData>:


void LCD_voidWriteData(u8 Copy_Data)
{
 996:	cf 93       	push	r28
 998:	df 93       	push	r29
 99a:	1f 92       	push	r1
 99c:	cd b7       	in	r28, 0x3d	; 61
 99e:	de b7       	in	r29, 0x3e	; 62
 9a0:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8SetPinValue(PIN_2,DIO_LOW);
 9a2:	60 e0       	ldi	r22, 0x00	; 0
 9a4:	82 e0       	ldi	r24, 0x02	; 2
 9a6:	0e 94 25 02 	call	0x44a	; 0x44a <DIO_u8SetPinValue>

	DIO_u8SetPinValue(PIN_0,DIO_HIGH);
 9aa:	61 e0       	ldi	r22, 0x01	; 1
 9ac:	80 e0       	ldi	r24, 0x00	; 0
 9ae:	0e 94 25 02 	call	0x44a	; 0x44a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(PIN_1,DIO_LOW);
 9b2:	60 e0       	ldi	r22, 0x00	; 0
 9b4:	81 e0       	ldi	r24, 0x01	; 1
 9b6:	0e 94 25 02 	call	0x44a	; 0x44a <DIO_u8SetPinValue>
	DIO_u8SetPortValue(PORT_D,Copy_Data);
 9ba:	69 81       	ldd	r22, Y+1	; 0x01
 9bc:	82 e3       	ldi	r24, 0x32	; 50
 9be:	90 e0       	ldi	r25, 0x00	; 0
 9c0:	0e 94 10 02 	call	0x420	; 0x420 <DIO_u8SetPortValue>
	DIO_u8SetPinValue(PIN_2,DIO_HIGH);
 9c4:	61 e0       	ldi	r22, 0x01	; 1
 9c6:	82 e0       	ldi	r24, 0x02	; 2
 9c8:	0e 94 25 02 	call	0x44a	; 0x44a <DIO_u8SetPinValue>
	delay_ms(2);
 9cc:	62 e0       	ldi	r22, 0x02	; 2
 9ce:	70 e0       	ldi	r23, 0x00	; 0
 9d0:	80 e0       	ldi	r24, 0x00	; 0
 9d2:	90 e0       	ldi	r25, 0x00	; 0
 9d4:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <delay_ms>

	DIO_u8SetPinValue(PIN_2,DIO_LOW);
 9d8:	60 e0       	ldi	r22, 0x00	; 0
 9da:	82 e0       	ldi	r24, 0x02	; 2
 9dc:	0e 94 25 02 	call	0x44a	; 0x44a <DIO_u8SetPinValue>
}
 9e0:	0f 90       	pop	r0
 9e2:	df 91       	pop	r29
 9e4:	cf 91       	pop	r28
 9e6:	08 95       	ret

000009e8 <LCD_voidInit>:

void LCD_voidInit(void)
{
 9e8:	cf 93       	push	r28
 9ea:	df 93       	push	r29
 9ec:	cd b7       	in	r28, 0x3d	; 61
 9ee:	de b7       	in	r29, 0x3e	; 62

delay_ms(50);
 9f0:	62 e3       	ldi	r22, 0x32	; 50
 9f2:	70 e0       	ldi	r23, 0x00	; 0
 9f4:	80 e0       	ldi	r24, 0x00	; 0
 9f6:	90 e0       	ldi	r25, 0x00	; 0
 9f8:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <delay_ms>

LCD_voidWriteCommand(0b00111000); // 0b 0011NFxx  N Number of lines F Font
 9fc:	88 e3       	ldi	r24, 0x38	; 56
 9fe:	0e 94 a2 04 	call	0x944	; 0x944 <LCD_voidWriteCommand>
delay_ms(2);
 a02:	62 e0       	ldi	r22, 0x02	; 2
 a04:	70 e0       	ldi	r23, 0x00	; 0
 a06:	80 e0       	ldi	r24, 0x00	; 0
 a08:	90 e0       	ldi	r25, 0x00	; 0
 a0a:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <delay_ms>
LCD_voidWriteCommand(0b00001100); //0b00001DCB 	D Display ON OFF  C Cursor ON OFF B Cursor Blink
 a0e:	8c e0       	ldi	r24, 0x0C	; 12
 a10:	0e 94 a2 04 	call	0x944	; 0x944 <LCD_voidWriteCommand>
delay_ms(2);
 a14:	62 e0       	ldi	r22, 0x02	; 2
 a16:	70 e0       	ldi	r23, 0x00	; 0
 a18:	80 e0       	ldi	r24, 0x00	; 0
 a1a:	90 e0       	ldi	r25, 0x00	; 0
 a1c:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <delay_ms>
LCD_voidWriteCommand(0b00000001); //CLEAR THE LCD
 a20:	81 e0       	ldi	r24, 0x01	; 1
 a22:	0e 94 a2 04 	call	0x944	; 0x944 <LCD_voidWriteCommand>

}
 a26:	df 91       	pop	r29
 a28:	cf 91       	pop	r28
 a2a:	08 95       	ret

00000a2c <SWITCH_u8GetStatus>:
#include "DIO_Private.h"
#include "switch.h"


u8 SWITCH_u8GetStatus(u8 Copy_u8PinNumber,pu8 Copy_pu8PinStatus)
{
 a2c:	cf 93       	push	r28
 a2e:	df 93       	push	r29
 a30:	00 d0       	rcall	.+0      	; 0xa32 <SWITCH_u8GetStatus+0x6>
 a32:	00 d0       	rcall	.+0      	; 0xa34 <SWITCH_u8GetStatus+0x8>
 a34:	cd b7       	in	r28, 0x3d	; 61
 a36:	de b7       	in	r29, 0x3e	; 62
 a38:	8a 83       	std	Y+2, r24	; 0x02
 a3a:	7c 83       	std	Y+4, r23	; 0x04
 a3c:	6b 83       	std	Y+3, r22	; 0x03
	static u8 SWITCH_u8PushedCounter=0,SWITCH_u8ReleasedCounter=0;


u8 Local_u8Status;
DIO_u8GetPinValue(Copy_u8PinNumber,&Local_u8Status);
 a3e:	ce 01       	movw	r24, r28
 a40:	01 96       	adiw	r24, 0x01	; 1
 a42:	bc 01       	movw	r22, r24
 a44:	8a 81       	ldd	r24, Y+2	; 0x02
 a46:	0e 94 4c 03 	call	0x698	; 0x698 <DIO_u8GetPinValue>

if (DIO_HIGH==Local_u8Status)
 a4a:	89 81       	ldd	r24, Y+1	; 0x01
 a4c:	81 30       	cpi	r24, 0x01	; 1
 a4e:	c9 f4       	brne	.+50     	; 0xa82 <SWITCH_u8GetStatus+0x56>
	{
		SWITCH_u8PushedCounter++;
 a50:	80 91 68 00 	lds	r24, 0x0068
 a54:	8f 5f       	subi	r24, 0xFF	; 255
 a56:	80 93 68 00 	sts	0x0068, r24
		SWITCH_u8ReleasedCounter=THREESHOLD_MINIMUM;
 a5a:	10 92 69 00 	sts	0x0069, r1

		if (THREESHOLD_MAXIMUM<=SWITCH_u8PushedCounter)
 a5e:	80 91 68 00 	lds	r24, 0x0068
 a62:	8a 30       	cpi	r24, 0x0A	; 10
 a64:	40 f0       	brcs	.+16     	; 0xa76 <SWITCH_u8GetStatus+0x4a>
		{
			*Copy_pu8PinStatus=PUSHED;
 a66:	8b 81       	ldd	r24, Y+3	; 0x03
 a68:	9c 81       	ldd	r25, Y+4	; 0x04
 a6a:	21 e0       	ldi	r18, 0x01	; 1
 a6c:	fc 01       	movw	r30, r24
 a6e:	20 83       	st	Z, r18
			SWITCH_u8PushedCounter=THREESHOLD_MINIMUM;
 a70:	10 92 68 00 	sts	0x0068, r1
 a74:	20 c0       	rjmp	.+64     	; 0xab6 <SWITCH_u8GetStatus+0x8a>
		}
		else
		{
				*Copy_pu8PinStatus=PRE_PUSHED;
 a76:	8b 81       	ldd	r24, Y+3	; 0x03
 a78:	9c 81       	ldd	r25, Y+4	; 0x04
 a7a:	23 e0       	ldi	r18, 0x03	; 3
 a7c:	fc 01       	movw	r30, r24
 a7e:	20 83       	st	Z, r18
 a80:	1a c0       	rjmp	.+52     	; 0xab6 <SWITCH_u8GetStatus+0x8a>

		}
}


else if (DIO_LOW==Local_u8Status)
 a82:	89 81       	ldd	r24, Y+1	; 0x01
 a84:	88 23       	and	r24, r24
 a86:	b9 f4       	brne	.+46     	; 0xab6 <SWITCH_u8GetStatus+0x8a>
{
	SWITCH_u8ReleasedCounter++;
 a88:	80 91 69 00 	lds	r24, 0x0069
 a8c:	8f 5f       	subi	r24, 0xFF	; 255
 a8e:	80 93 69 00 	sts	0x0069, r24
	SWITCH_u8PushedCounter=THREESHOLD_MINIMUM;
 a92:	10 92 68 00 	sts	0x0068, r1

	if (THREESHOLD_MAXIMUM>=SWITCH_u8ReleasedCounter)
 a96:	80 91 69 00 	lds	r24, 0x0069
 a9a:	8b 30       	cpi	r24, 0x0B	; 11
 a9c:	38 f4       	brcc	.+14     	; 0xaac <SWITCH_u8GetStatus+0x80>
	{
		*Copy_pu8PinStatus=RELEASED;
 a9e:	8b 81       	ldd	r24, Y+3	; 0x03
 aa0:	9c 81       	ldd	r25, Y+4	; 0x04
 aa2:	fc 01       	movw	r30, r24
 aa4:	10 82       	st	Z, r1
		SWITCH_u8ReleasedCounter=THREESHOLD_MINIMUM;
 aa6:	10 92 69 00 	sts	0x0069, r1
 aaa:	05 c0       	rjmp	.+10     	; 0xab6 <SWITCH_u8GetStatus+0x8a>
	}
	else
	{
		*Copy_pu8PinStatus=PRE_RELEASED;
 aac:	8b 81       	ldd	r24, Y+3	; 0x03
 aae:	9c 81       	ldd	r25, Y+4	; 0x04
 ab0:	22 e0       	ldi	r18, 0x02	; 2
 ab2:	fc 01       	movw	r30, r24
 ab4:	20 83       	st	Z, r18
	}


}

return OK;
 ab6:	80 e0       	ldi	r24, 0x00	; 0
}
 ab8:	0f 90       	pop	r0
 aba:	0f 90       	pop	r0
 abc:	0f 90       	pop	r0
 abe:	0f 90       	pop	r0
 ac0:	df 91       	pop	r29
 ac2:	cf 91       	pop	r28
 ac4:	08 95       	ret

00000ac6 <main2>:
#include "LCD_Interface.h"
#include "pripherals.h"
#include "Stepper.h"

void main2 (void)
{
 ac6:	cf 93       	push	r28
 ac8:	df 93       	push	r29
 aca:	cd b7       	in	r28, 0x3d	; 61
 acc:	de b7       	in	r29, 0x3e	; 62
 ace:	61 97       	sbiw	r28, 0x11	; 17
 ad0:	0f b6       	in	r0, 0x3f	; 63
 ad2:	f8 94       	cli
 ad4:	de bf       	out	0x3e, r29	; 62
 ad6:	0f be       	out	0x3f, r0	; 63
 ad8:	cd bf       	out	0x3d, r28	; 61

u8 Stepper_u8PatternZero[]={DIO_HIGH,DIO_LOW,DIO_LOW,DIO_LOW};
 ada:	81 e0       	ldi	r24, 0x01	; 1
 adc:	8a 83       	std	Y+2, r24	; 0x02
 ade:	1b 82       	std	Y+3, r1	; 0x03
 ae0:	1c 82       	std	Y+4, r1	; 0x04
 ae2:	1d 82       	std	Y+5, r1	; 0x05
u8 Stepper_u8PatternOne[]={DIO_LOW,DIO_HIGH,DIO_LOW,DIO_LOW};
 ae4:	1e 82       	std	Y+6, r1	; 0x06
 ae6:	81 e0       	ldi	r24, 0x01	; 1
 ae8:	8f 83       	std	Y+7, r24	; 0x07
 aea:	18 86       	std	Y+8, r1	; 0x08
 aec:	19 86       	std	Y+9, r1	; 0x09
u8 Stepper_u8PatternTwo[]={DIO_LOW,DIO_LOW,DIO_HIGH,DIO_LOW};
 aee:	1a 86       	std	Y+10, r1	; 0x0a
 af0:	1b 86       	std	Y+11, r1	; 0x0b
 af2:	81 e0       	ldi	r24, 0x01	; 1
 af4:	8c 87       	std	Y+12, r24	; 0x0c
 af6:	1d 86       	std	Y+13, r1	; 0x0d
u8 Stepper_u8PatternThree[]={DIO_LOW,DIO_LOW,DIO_LOW,DIO_HIGH};
 af8:	1e 86       	std	Y+14, r1	; 0x0e
 afa:	1f 86       	std	Y+15, r1	; 0x0f
 afc:	18 8a       	std	Y+16, r1	; 0x10
 afe:	81 e0       	ldi	r24, 0x01	; 1
 b00:	89 8b       	std	Y+17, r24	; 0x11
u8 Stepper_u8Counter=0;
 b02:	19 82       	std	Y+1, r1	; 0x01
DIO_voidInitialize();
 b04:	0e 94 a9 00 	call	0x152	; 0x152 <DIO_voidInitialize>

DIO_u8SetPinDirection(COIL_ONE_LEFT,DIO_OUTPUT);//blue
 b08:	61 e0       	ldi	r22, 0x01	; 1
 b0a:	80 e1       	ldi	r24, 0x10	; 16
 b0c:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <DIO_u8SetPinDirection>
DIO_u8SetPinDirection(COIL_ONE_RIGHT,DIO_OUTPUT);//pink
 b10:	61 e0       	ldi	r22, 0x01	; 1
 b12:	81 e1       	ldi	r24, 0x11	; 17
 b14:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <DIO_u8SetPinDirection>
DIO_u8SetPinDirection(COIL_TWO_LEFT,DIO_OUTPUT);//yellow
 b18:	61 e0       	ldi	r22, 0x01	; 1
 b1a:	82 e1       	ldi	r24, 0x12	; 18
 b1c:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <DIO_u8SetPinDirection>
DIO_u8SetPinDirection(COIL_TWO_RIGHT,DIO_OUTPUT);//orange
 b20:	61 e0       	ldi	r22, 0x01	; 1
 b22:	83 e1       	ldi	r24, 0x13	; 19
 b24:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <DIO_u8SetPinDirection>

while (1)
{


	for (Stepper_u8Counter=INITIAL_LOOP_COUNTER;Stepper_u8Counter<MAXIMUM_LOOP_COUNTER;Stepper_u8Counter++)
 b28:	19 82       	std	Y+1, r1	; 0x01
 b2a:	3b c0       	rjmp	.+118    	; 0xba2 <main2+0xdc>
	{
		DIO_u8SetPinValue(COIL_ONE_LEFT,Stepper_u8PatternZero[Stepper_u8Counter]);
 b2c:	89 81       	ldd	r24, Y+1	; 0x01
 b2e:	88 2f       	mov	r24, r24
 b30:	90 e0       	ldi	r25, 0x00	; 0
 b32:	9e 01       	movw	r18, r28
 b34:	2e 5f       	subi	r18, 0xFE	; 254
 b36:	3f 4f       	sbci	r19, 0xFF	; 255
 b38:	82 0f       	add	r24, r18
 b3a:	93 1f       	adc	r25, r19
 b3c:	fc 01       	movw	r30, r24
 b3e:	80 81       	ld	r24, Z
 b40:	68 2f       	mov	r22, r24
 b42:	80 e1       	ldi	r24, 0x10	; 16
 b44:	0e 94 25 02 	call	0x44a	; 0x44a <DIO_u8SetPinValue>
		DIO_u8SetPinValue(COIL_ONE_RIGHT,Stepper_u8PatternOne[Stepper_u8Counter]);
 b48:	89 81       	ldd	r24, Y+1	; 0x01
 b4a:	88 2f       	mov	r24, r24
 b4c:	90 e0       	ldi	r25, 0x00	; 0
 b4e:	9e 01       	movw	r18, r28
 b50:	2a 5f       	subi	r18, 0xFA	; 250
 b52:	3f 4f       	sbci	r19, 0xFF	; 255
 b54:	82 0f       	add	r24, r18
 b56:	93 1f       	adc	r25, r19
 b58:	fc 01       	movw	r30, r24
 b5a:	80 81       	ld	r24, Z
 b5c:	68 2f       	mov	r22, r24
 b5e:	81 e1       	ldi	r24, 0x11	; 17
 b60:	0e 94 25 02 	call	0x44a	; 0x44a <DIO_u8SetPinValue>
		DIO_u8SetPinValue(COIL_TWO_LEFT,Stepper_u8PatternTwo[Stepper_u8Counter]);
 b64:	89 81       	ldd	r24, Y+1	; 0x01
 b66:	88 2f       	mov	r24, r24
 b68:	90 e0       	ldi	r25, 0x00	; 0
 b6a:	9e 01       	movw	r18, r28
 b6c:	26 5f       	subi	r18, 0xF6	; 246
 b6e:	3f 4f       	sbci	r19, 0xFF	; 255
 b70:	82 0f       	add	r24, r18
 b72:	93 1f       	adc	r25, r19
 b74:	fc 01       	movw	r30, r24
 b76:	80 81       	ld	r24, Z
 b78:	68 2f       	mov	r22, r24
 b7a:	82 e1       	ldi	r24, 0x12	; 18
 b7c:	0e 94 25 02 	call	0x44a	; 0x44a <DIO_u8SetPinValue>
		DIO_u8SetPinValue(COIL_TWO_RIGHT,Stepper_u8PatternThree[Stepper_u8Counter]);
 b80:	89 81       	ldd	r24, Y+1	; 0x01
 b82:	88 2f       	mov	r24, r24
 b84:	90 e0       	ldi	r25, 0x00	; 0
 b86:	9e 01       	movw	r18, r28
 b88:	22 5f       	subi	r18, 0xF2	; 242
 b8a:	3f 4f       	sbci	r19, 0xFF	; 255
 b8c:	82 0f       	add	r24, r18
 b8e:	93 1f       	adc	r25, r19
 b90:	fc 01       	movw	r30, r24
 b92:	80 81       	ld	r24, Z
 b94:	68 2f       	mov	r22, r24
 b96:	83 e1       	ldi	r24, 0x13	; 19
 b98:	0e 94 25 02 	call	0x44a	; 0x44a <DIO_u8SetPinValue>

while (1)
{


	for (Stepper_u8Counter=INITIAL_LOOP_COUNTER;Stepper_u8Counter<MAXIMUM_LOOP_COUNTER;Stepper_u8Counter++)
 b9c:	89 81       	ldd	r24, Y+1	; 0x01
 b9e:	8f 5f       	subi	r24, 0xFF	; 255
 ba0:	89 83       	std	Y+1, r24	; 0x01
 ba2:	89 81       	ldd	r24, Y+1	; 0x01
 ba4:	84 30       	cpi	r24, 0x04	; 4
 ba6:	10 f2       	brcs	.-124    	; 0xb2c <main2+0x66>
DIO_u8SetPinValue(COIL_TWO_LEFT,DIO_LOW);
DIO_u8SetPinValue(COIL_TWO_RIGHT,DIO_HIGH);
delay_ms(5);
*/

DIO_u8SetPinValue(COIL_ONE_LEFT,DIO_HIGH);
 ba8:	61 e0       	ldi	r22, 0x01	; 1
 baa:	80 e1       	ldi	r24, 0x10	; 16
 bac:	0e 94 25 02 	call	0x44a	; 0x44a <DIO_u8SetPinValue>
}
 bb0:	bb cf       	rjmp	.-138    	; 0xb28 <main2+0x62>

00000bb2 <delay_ms>:
 *  Created on: Dec 13, 2016
 *      Author: Russel
 */
#include "delay_ms.h"

void delay_ms(u32 delay_Value){
 bb2:	cf 93       	push	r28
 bb4:	df 93       	push	r29
 bb6:	cd b7       	in	r28, 0x3d	; 61
 bb8:	de b7       	in	r29, 0x3e	; 62
 bba:	28 97       	sbiw	r28, 0x08	; 8
 bbc:	0f b6       	in	r0, 0x3f	; 63
 bbe:	f8 94       	cli
 bc0:	de bf       	out	0x3e, r29	; 62
 bc2:	0f be       	out	0x3f, r0	; 63
 bc4:	cd bf       	out	0x3d, r28	; 61
 bc6:	6d 83       	std	Y+5, r22	; 0x05
 bc8:	7e 83       	std	Y+6, r23	; 0x06
 bca:	8f 83       	std	Y+7, r24	; 0x07
 bcc:	98 87       	std	Y+8, r25	; 0x08
u32 counter;
while (delay_Value)
 bce:	25 c0       	rjmp	.+74     	; 0xc1a <delay_ms+0x68>
{
	//112 is the right one

	for (counter=MIN_FOR_NOP;counter<MAX__FOR_NOP;counter++)
 bd0:	19 82       	std	Y+1, r1	; 0x01
 bd2:	1a 82       	std	Y+2, r1	; 0x02
 bd4:	1b 82       	std	Y+3, r1	; 0x03
 bd6:	1c 82       	std	Y+4, r1	; 0x04
 bd8:	0c c0       	rjmp	.+24     	; 0xbf2 <delay_ms+0x40>
	{
		asm ("nop");
 bda:	00 00       	nop
u32 counter;
while (delay_Value)
{
	//112 is the right one

	for (counter=MIN_FOR_NOP;counter<MAX__FOR_NOP;counter++)
 bdc:	89 81       	ldd	r24, Y+1	; 0x01
 bde:	9a 81       	ldd	r25, Y+2	; 0x02
 be0:	ab 81       	ldd	r26, Y+3	; 0x03
 be2:	bc 81       	ldd	r27, Y+4	; 0x04
 be4:	01 96       	adiw	r24, 0x01	; 1
 be6:	a1 1d       	adc	r26, r1
 be8:	b1 1d       	adc	r27, r1
 bea:	89 83       	std	Y+1, r24	; 0x01
 bec:	9a 83       	std	Y+2, r25	; 0x02
 bee:	ab 83       	std	Y+3, r26	; 0x03
 bf0:	bc 83       	std	Y+4, r27	; 0x04
 bf2:	89 81       	ldd	r24, Y+1	; 0x01
 bf4:	9a 81       	ldd	r25, Y+2	; 0x02
 bf6:	ab 81       	ldd	r26, Y+3	; 0x03
 bf8:	bc 81       	ldd	r27, Y+4	; 0x04
 bfa:	8f 36       	cpi	r24, 0x6F	; 111
 bfc:	91 05       	cpc	r25, r1
 bfe:	a1 05       	cpc	r26, r1
 c00:	b1 05       	cpc	r27, r1
 c02:	58 f3       	brcs	.-42     	; 0xbda <delay_ms+0x28>
	{
		asm ("nop");

	}

delay_Value--;
 c04:	8d 81       	ldd	r24, Y+5	; 0x05
 c06:	9e 81       	ldd	r25, Y+6	; 0x06
 c08:	af 81       	ldd	r26, Y+7	; 0x07
 c0a:	b8 85       	ldd	r27, Y+8	; 0x08
 c0c:	01 97       	sbiw	r24, 0x01	; 1
 c0e:	a1 09       	sbc	r26, r1
 c10:	b1 09       	sbc	r27, r1
 c12:	8d 83       	std	Y+5, r24	; 0x05
 c14:	9e 83       	std	Y+6, r25	; 0x06
 c16:	af 83       	std	Y+7, r26	; 0x07
 c18:	b8 87       	std	Y+8, r27	; 0x08
 */
#include "delay_ms.h"

void delay_ms(u32 delay_Value){
u32 counter;
while (delay_Value)
 c1a:	8d 81       	ldd	r24, Y+5	; 0x05
 c1c:	9e 81       	ldd	r25, Y+6	; 0x06
 c1e:	af 81       	ldd	r26, Y+7	; 0x07
 c20:	b8 85       	ldd	r27, Y+8	; 0x08
 c22:	00 97       	sbiw	r24, 0x00	; 0
 c24:	a1 05       	cpc	r26, r1
 c26:	b1 05       	cpc	r27, r1
 c28:	99 f6       	brne	.-90     	; 0xbd0 <delay_ms+0x1e>
delay_Value--;
}



}
 c2a:	28 96       	adiw	r28, 0x08	; 8
 c2c:	0f b6       	in	r0, 0x3f	; 63
 c2e:	f8 94       	cli
 c30:	de bf       	out	0x3e, r29	; 62
 c32:	0f be       	out	0x3f, r0	; 63
 c34:	cd bf       	out	0x3d, r28	; 61
 c36:	df 91       	pop	r29
 c38:	cf 91       	pop	r28
 c3a:	08 95       	ret

00000c3c <main>:
#include "pripherals.h"
#include "Buzzer.h"
#include "switch.h"

void main(void)
{
 c3c:	cf 93       	push	r28
 c3e:	df 93       	push	r29
 c40:	1f 92       	push	r1
 c42:	cd b7       	in	r28, 0x3d	; 61
 c44:	de b7       	in	r29, 0x3e	; 62



u8 Status;
	DIO_voidInitialize();
 c46:	0e 94 a9 00 	call	0x152	; 0x152 <DIO_voidInitialize>
DIO_u8SetPinDirection(MOTOR_DIRECTION_ONE_UPPER,DIO_OUTPUT);
 c4a:	61 e0       	ldi	r22, 0x01	; 1
 c4c:	80 e1       	ldi	r24, 0x10	; 16
 c4e:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <DIO_u8SetPinDirection>
DIO_u8SetPinDirection(MOTOR_DIRECTION_ONE_LOWER,DIO_INPUT);
 c52:	60 e0       	ldi	r22, 0x00	; 0
 c54:	81 e1       	ldi	r24, 0x11	; 17
 c56:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <DIO_u8SetPinDirection>
DIO_u8SetPinDirection(MOTOR_DIRECTION_TWO_UPPER,DIO_OUTPUT);
 c5a:	61 e0       	ldi	r22, 0x01	; 1
 c5c:	83 e1       	ldi	r24, 0x13	; 19
 c5e:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <DIO_u8SetPinDirection>
DIO_u8SetPinDirection(MOTOR_DIRECTION_TWO_LOWER,DIO_OUTPUT);
 c62:	61 e0       	ldi	r22, 0x01	; 1
 c64:	82 e1       	ldi	r24, 0x12	; 18
 c66:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <DIO_u8SetPinDirection>
delay_ms(10);
DIO_u8SetPinValue(MOTOR_DIRECTION_TWO_UPPER,DIO_HIGH);

delay_ms(3000);*/

SWITCH_u8GetStatus(PIN_17,&Status);
 c6a:	ce 01       	movw	r24, r28
 c6c:	01 96       	adiw	r24, 0x01	; 1
 c6e:	bc 01       	movw	r22, r24
 c70:	81 e1       	ldi	r24, 0x11	; 17
 c72:	0e 94 16 05 	call	0xa2c	; 0xa2c <SWITCH_u8GetStatus>
		DIO_u8SetPinValue(PIN_16,DIO_LOW);
	}
*/


if (PUSHED==Status)
 c76:	89 81       	ldd	r24, Y+1	; 0x01
 c78:	81 30       	cpi	r24, 0x01	; 1
 c7a:	29 f4       	brne	.+10     	; 0xc86 <main+0x4a>
{

DIO_u8SetPinValue(PIN_16,DIO_HIGH);
 c7c:	61 e0       	ldi	r22, 0x01	; 1
 c7e:	80 e1       	ldi	r24, 0x10	; 16
 c80:	0e 94 25 02 	call	0x44a	; 0x44a <DIO_u8SetPinValue>
 c84:	08 c0       	rjmp	.+16     	; 0xc96 <main+0x5a>
}
else if (RELEASED == Status)
 c86:	89 81       	ldd	r24, Y+1	; 0x01
 c88:	88 23       	and	r24, r24
 c8a:	29 f4       	brne	.+10     	; 0xc96 <main+0x5a>
{
	DIO_u8SetPinValue(PIN_16,DIO_LOW);
 c8c:	60 e0       	ldi	r22, 0x00	; 0
 c8e:	80 e1       	ldi	r24, 0x10	; 16
 c90:	0e 94 25 02 	call	0x44a	; 0x44a <DIO_u8SetPinValue>

}
}
 c94:	ea cf       	rjmp	.-44     	; 0xc6a <main+0x2e>
 c96:	e9 cf       	rjmp	.-46     	; 0xc6a <main+0x2e>

00000c98 <__tablejump2__>:
 c98:	ee 0f       	add	r30, r30
 c9a:	ff 1f       	adc	r31, r31

00000c9c <__tablejump__>:
 c9c:	05 90       	lpm	r0, Z+
 c9e:	f4 91       	lpm	r31, Z
 ca0:	e0 2d       	mov	r30, r0
 ca2:	09 94       	ijmp

00000ca4 <_exit>:
 ca4:	f8 94       	cli

00000ca6 <__stop_program>:
 ca6:	ff cf       	rjmp	.-2      	; 0xca6 <__stop_program>
